(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{377:function(e,a,t){"use strict";t.r(a);var n=t(0),c=t.n(n),o=t(369),s=t(368),p=t(9),r=t.n(p),b=t(69),l=t.n(b),m=t(79),N=t(389),u=t(371),d=t(391),i=t.n(d),j=t(367),O={_frontmatter:{}},k="wrapper";function h(e){var a=e.components,t=l()(e,["components"]);return Object(m.b)(k,r()({},O,t,{components:a,mdxType:"MDXLayout"}),Object(m.b)("h1",{id:"parcelboundary"},"ParcelBoundary"),Object(m.b)(u.a,{src:i.a,mdxType:"ApiPageIcon"}),Object(m.b)("p",null,"ParcelBoundary is a React component. Its job is to optimise rendering performance, and to optionally control the flow of parcel changes."),Object(m.b)("p",null,"Each ParcelBoundary is passed a Parcel. By default the ParcelBoundary uses pure rendering, and will only update when the Parcel's data changes to avoid unnecessary re-rendering."),Object(m.b)("p",null,"ParcelBoundaries have an internal buffer that can hold onto changes as they exit the boundary. These are normally released immediately, but also allow for debouncing changes, or putting a hold on all changes so they can be released later. Internally ParcelBoundaries use a ",Object(m.b)("a",r()({parentName:"p"},{href:"/api/useParcelBuffer"}),"useParcelBuffer")," hook."),Object(m.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(m.b)("pre",r()({parentName:"div"},{className:"language-js"}),Object(m.b)("code",r()({parentName:"pre"},{className:"language-js"}),Object(m.b)("span",r()({parentName:"code"},{className:"token keyword"}),"import")," ParcelBoundary ",Object(m.b)("span",r()({parentName:"code"},{className:"token keyword"}),"from")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token string"}),"'react-dataparcels/ParcelBoundary'"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),";")))),Object(m.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(m.b)("pre",r()({parentName:"div"},{className:"language-js"}),Object(m.b)("code",r()({parentName:"pre"},{className:"language-js"}),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),"ParcelBoundary\n    parcel",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),"Parcel",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),"\n    pure",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"?"),"boolean",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),"\n    forceUpdate",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"?"),"any",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"["),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"]"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),"\n    buffer",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"?"),"boolean",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),"\n    debounce",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"?"),"number",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),"\n    beforeChange",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"?"),"Function",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"|"),"Function",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"["),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"]"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">"),"\n    ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",r()({parentName:"code"},{className:"token parameter"}),"parcel",Object(m.b)("span",r()({parentName:"span"},{className:"token punctuation"}),",")," control"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"=>")," Node",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"/"),"ParcelBoundary",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">")))),Object(m.b)(N.a,{mdxType:"Message"},"ParcelBoundary is also available as a hook, ",Object(m.b)(j.b,{to:"/api/useParcelBuffer",mdxType:"Link"},"useParcelBuffer"),"."),Object(m.b)("h2",{id:"children"},Object(m.b)(j.d,{textStyle:"weaker",mdxType:"Text"},"Children")),Object(m.b)("h3",{id:"childrenderer"},"childRenderer"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(m.b)("pre",r()({parentName:"div"},{className:"language-flow"}),Object(m.b)("code",r()({parentName:"pre"},{className:"language-flow"}),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),"parcel",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),":")," Parcel",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),",")," buffer",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),":")," ParcelHookControl",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"=>")," Node\n\n",Object(m.b)("span",r()({parentName:"code"},{className:"token keyword"}),"type")," ParcelHookControl ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    submit",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token type tag"}),"void"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),","),"\n    reset",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token type tag"}),"void"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),","),"\n    buffered",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token type tag"}),"boolean"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),","),"\n    actions",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),":")," Action",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"["),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"]"),"\n",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}")))),Object(m.b)("p",null,"ParcelBoundaries must be given a ",Object(m.b)("inlineCode",{parentName:"p"},"childRenderer")," function as children. This is called whenever the ParcelBoundary updates."),Object(m.b)("p",null,"It is passed a ",Object(m.b)("inlineCode",{parentName:"p"},"parcel")," and a ParcelHookControl object."),Object(m.b)("ul",null,Object(m.b)("li",{parentName:"ul"},"The ",Object(m.b)("inlineCode",{parentName:"li"},"parcel"),' is on the "inside" of the parcel boundary, and is able to update independently of the parcel that was passed into the ParcelBoundary.'),Object(m.b)("li",{parentName:"ul"},"The ",Object(m.b)("inlineCode",{parentName:"li"},"buffer")," argument passes a ParcelHookControl which can be used to control the ParcelBoundary's action buffer and information about the current state of the action buffer.")),Object(m.b)("h4",{id:"parcelhookcontrol"},"ParcelHookControl"),Object(m.b)("ul",null,Object(m.b)("li",{parentName:"ul"},"The ",Object(m.b)("inlineCode",{parentName:"li"},"submit()")," function will submit changes in the buffer, allowing them to propagate upward out of the ParcelBoundary."),Object(m.b)("li",{parentName:"ul"},"The ",Object(m.b)("inlineCode",{parentName:"li"},"reset()")," function will reset the buffer, clearing any changes in the buffer."),Object(m.b)("li",{parentName:"ul"},"The ",Object(m.b)("inlineCode",{parentName:"li"},"buffered")," boolean indicates if the ParcelBoundary currently contains changes that it hasn't yet submitted."),Object(m.b)("li",{parentName:"ul"},"The ",Object(m.b)("inlineCode",{parentName:"li"},"actions")," array contains the actions that are currently held in the buffer.")),Object(m.b)("p",null,"The return value of ",Object(m.b)("inlineCode",{parentName:"p"},"childRenderer")," will be rendered."),Object(m.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(m.b)("pre",r()({parentName:"div"},{className:"language-js"}),Object(m.b)("code",r()({parentName:"pre"},{className:"language-js"}),Object(m.b)("span",r()({parentName:"code"},{className:"token comment"}),"// personParcel is a Parcel"),"\n",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),"ParcelBoundary parcel",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),"personParcel",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">"),"\n    ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",r()({parentName:"code"},{className:"token parameter"}),"parcel",Object(m.b)("span",r()({parentName:"span"},{className:"token punctuation"}),",")," buffer"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),"\n        ",Object(m.b)("span",r()({parentName:"code"},{className:"token keyword"}),"return")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),"input type",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token string"}),'"text"')," ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"..."),"parcel",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"."),Object(m.b)("span",r()({parentName:"code"},{className:"token function"}),"spreadDOM"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"/"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),";"),"\n    ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"/"),"ParcelBoundary",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">")))),Object(m.b)("h2",{id:"props"},Object(m.b)(j.d,{textStyle:"weaker",mdxType:"Text"},"Props")),Object(m.b)("h3",{id:"parcel"},"parcel"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(m.b)("pre",r()({parentName:"div"},{className:"language-flow"}),Object(m.b)("code",r()({parentName:"pre"},{className:"language-flow"}),"parcel",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),":")," Parcel"))),Object(m.b)("p",null,"The parcel to put into the boundary."),Object(m.b)("h4",{id:"behaviour-notes"},"Behaviour notes"),Object(m.b)("p",null,"Whenever a ParcelBoundary receives a new Parcel via props, ParcelBoundary's default behaviour is to:"),Object(m.b)("ul",null,Object(m.b)("li",{parentName:"ul"},"update to contain the new Parcel’s data"),Object(m.b)("li",{parentName:"ul"},"forget about all its buffered changes")),Object(m.b)("p",null,"This is safe default behaviour because changes in the buffer may not be compatible with the new Parcel's data shape. However it may be user unfriendly in some cases, depending on when and how often the parcel updates from props."),Object(m.b)("p",null,"If you would like to keep the changes in the buffer, and you know that buffered changes will always be compatible with any new Parcel's data shape, consider using ",Object(m.b)("a",r()({parentName:"p"},{href:"/api/useParcelForm#rebase"}),"useParcelForm.rebase")," or ",Object(m.b)("a",r()({parentName:"p"},{href:"/api/useParcelState#rebase"}),"useParcelState.rebase"),"."),Object(m.b)("h3",{id:"pure"},"pure"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(m.b)("pre",r()({parentName:"div"},{className:"language-flow"}),Object(m.b)("code",r()({parentName:"pre"},{className:"language-flow"}),"pure",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"?"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token type tag"}),"boolean")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token boolean"}),"true")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token comment"}),"// optional")))),Object(m.b)("p",null,"Enables pure rendering. When ",Object(m.b)("inlineCode",{parentName:"p"},"pure")," is true, ParcelBoundary will only re-render when ",Object(m.b)("inlineCode",{parentName:"p"},"parcel"),"'s data changes. It defaults to ",Object(m.b)("inlineCode",{parentName:"p"},"true"),"."),Object(m.b)("p",null,"Use ",Object(m.b)("inlineCode",{parentName:"p"},"forceUpdate")," if you would like ParcelBoundary to re-render in response to changes in other props."),Object(m.b)("p",null,Object(m.b)("strong",{parentName:"p"},Object(m.b)("a",r()({parentName:"strong"},{href:"/ui-behaviour#Pure-rendering"}),"See an example of ParcelBoundary pure"))),Object(m.b)("h3",{id:"forceupdate"},"forceUpdate"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(m.b)("pre",r()({parentName:"div"},{className:"language-flow"}),Object(m.b)("code",r()({parentName:"pre"},{className:"language-flow"}),"forceUpdate",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"?"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token type tag"}),"any"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"["),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token comment"}),"// optional")))),Object(m.b)("p",null,"While a ParcelBoundary is using pure rendering, ",Object(m.b)("inlineCode",{parentName:"p"},"forceUpdate")," will force the ParcelBoundary to re-render in response to changes in other props. Each item in the ",Object(m.b)("inlineCode",{parentName:"p"},"forceUpdate")," array is compared using strict equality against its previous values, and if any are not strictly equal, the ParcelBoundary will re-render."),Object(m.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(m.b)("pre",r()({parentName:"div"},{className:"language-js"}),Object(m.b)("code",r()({parentName:"pre"},{className:"language-js"}),Object(m.b)("span",r()({parentName:"code"},{className:"token comment"}),"// personParcel is a Parcel"),"\n",Object(m.b)("span",r()({parentName:"code"},{className:"token comment"}),"// in this example, options is an array of options that are loaded after mount"),"\n",Object(m.b)("span",r()({parentName:"code"},{className:"token comment"}),"// when options changes its value, the ParcelBoundary is forced to update"),"\n",Object(m.b)("span",r()({parentName:"code"},{className:"token comment"}),"// despite personParcel not changing"),"\n\n",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),"ParcelBoundary parcel",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),"personParcel",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}")," forceUpdate",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"["),"options",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"]"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">"),"\n    ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",r()({parentName:"code"},{className:"token parameter"}),"personParcel"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),"Select ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"..."),"personParcel",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"."),Object(m.b)("span",r()({parentName:"code"},{className:"token function"}),"spreadDOM"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}")," options",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),"options",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"/"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"/"),"ParcelBoundary",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">")))),Object(m.b)("h3",{id:"buffer"},"buffer"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(m.b)("pre",r()({parentName:"div"},{className:"language-flow"}),Object(m.b)("code",r()({parentName:"pre"},{className:"language-flow"}),"buffer",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"?"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token type tag"}),"boolean")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token boolean"}),"false")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token comment"}),"// optional")))),Object(m.b)("p",null,"When ",Object(m.b)("inlineCode",{parentName:"p"},"buffer")," is true, all changes made to the parcel inside the ParcelBoundary are prevented from being propagated out of the boundary. The inner parcel will continue to update as normal. You can then call ",Object(m.b)("inlineCode",{parentName:"p"},"control.submit()")," to release all the buffered changes at once, or ",Object(m.b)("inlineCode",{parentName:"p"},"control.reset()")," to cancel all the buffered changes."),Object(m.b)("p",null,"This can be useful for building UIs that have a submit action on a particular field. (Typically ",Object(m.b)("a",r()({parentName:"p"},{href:"/api/useParcelForm"}),"useParcelForm")," or ",Object(m.b)("a",r()({parentName:"p"},{href:"/api/useParcelBuffer"}),"useParcelBuffer")," are used for controlling the submission of an entire form.)"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(m.b)("pre",r()({parentName:"div"},{className:"language-js"}),Object(m.b)("code",r()({parentName:"pre"},{className:"language-js"}),Object(m.b)("span",r()({parentName:"code"},{className:"token comment"}),"// personParcel is a Parcel"),"\n",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),"ParcelBoundary parcel",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),"personParcel",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">"),"\n    ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",r()({parentName:"code"},{className:"token parameter"}),"personParcel",Object(m.b)("span",r()({parentName:"span"},{className:"token punctuation"}),",")," ",Object(m.b)("span",r()({parentName:"span"},{className:"token punctuation"}),"{"),"submit",Object(m.b)("span",r()({parentName:"span"},{className:"token punctuation"}),",")," reset",Object(m.b)("span",r()({parentName:"span"},{className:"token punctuation"}),"}")),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),"\n        ",Object(m.b)("span",r()({parentName:"code"},{className:"token comment"}),"// personParcel is now inside the ParcelBoundary"),"\n        ",Object(m.b)("span",r()({parentName:"code"},{className:"token keyword"}),"return")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),"div",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">"),"\n            ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),"input type",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token string"}),'"text"')," ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"..."),"personParcel",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"."),Object(m.b)("span",r()({parentName:"code"},{className:"token function"}),"spreadDOM"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"/"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">"),"\n            ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),"button onClick",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token function"}),"submit"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">"),"Submit",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"/"),"button",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">"),"\n            ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),"button onClick",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token function"}),"reset"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">"),"Cancel",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"/"),"button",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">"),"\n        ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"/"),"div",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),";"),"\n    ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"/"),"ParcelBoundary",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">")))),Object(m.b)("h3",{id:"debounce"},"debounce"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(m.b)("pre",r()({parentName:"div"},{className:"language-flow"}),Object(m.b)("code",r()({parentName:"pre"},{className:"language-flow"}),"debounce",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"?"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token type tag"}),"number")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token comment"}),"// optional")))),Object(m.b)("p",null,"If set, ",Object(m.b)("inlineCode",{parentName:"p"},"debounce")," will debounce any changes that occur inside the ParcelBoundary. The number indicates the number of milliseconds to debounce."),Object(m.b)("p",null,"This can be used to increase rendering performance for parcels that change value many times in rapid succession, such as text inputs."),Object(m.b)("h4",{id:"debouncing-explained"},"Debouncing explained"),Object(m.b)("p",null,"When the ",Object(m.b)("inlineCode",{parentName:"p"},"parcel")," in the ParcelBoundary sends a change, the ParcelBoundary will catch it and prevent it from being propagated out of the boundary. The parcel on the inside of the ParcelBoundary will still update as normal."),Object(m.b)("p",null,"The ParcelBoundary waits until no new changes have occured for ",Object(m.b)("inlineCode",{parentName:"p"},"debounce")," number of milliseconds. It then releases all the changes it has buffered, all together in a single change request."),Object(m.b)("p",null,"Debouncing can be good for rendering performance because parcels outside the ParcelBoundary don't needlessly update every time a small change occurs (e.g. each time the user presses a key), but the inside of the ParcelBoundary still updates immediately."),Object(m.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(m.b)("pre",r()({parentName:"div"},{className:"language-js"}),Object(m.b)("code",r()({parentName:"pre"},{className:"language-js"}),Object(m.b)("span",r()({parentName:"code"},{className:"token comment"}),"// personParcel is a Parcel"),"\n",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),"ParcelBoundary parcel",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),"personParcel",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}")," debounce",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token number"}),"100"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">"),"\n    ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",r()({parentName:"code"},{className:"token parameter"}),"personParcel"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),"input type",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token string"}),'"text"')," ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"..."),"personParcel",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"."),Object(m.b)("span",r()({parentName:"code"},{className:"token function"}),"spreadDOM"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"/"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"/"),"ParcelBoundary",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">")))),Object(m.b)("p",null,Object(m.b)("strong",{parentName:"p"},Object(m.b)("a",r()({parentName:"strong"},{href:"/ui-behaviour#Debouncing-changes"}),"See an example of ParcelBoundary debounce"))),Object(m.b)("h3",{id:"keepvalue"},"keepValue"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(m.b)("pre",r()({parentName:"div"},{className:"language-flow"}),Object(m.b)("code",r()({parentName:"pre"},{className:"language-flow"}),"keepValue",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"?"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token type tag"}),"boolean")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token boolean"}),"false")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token comment"}),"// optional")))),Object(m.b)("p",null,"Whenever a ParcelBoundary receives a new Parcel via props, its default behaviour is to update to contain the new Parcel's data. This behaviour is preferred in nearly all use cases."),Object(m.b)("p",null,"Occasionally you may have ",Object(m.b)("a",r()({parentName:"p"},{href:"/api/Parcel#modify_methods"}),"modify methods")," being used above the ParcelBoundary which change the data type on its trip up to the top level Parcel and back down again. The user may experience this as typing one thing, and the input updating to something else. So ",Object(m.b)("inlineCode",{parentName:"p"},"keepValue"),' can be set to true to make the ParcelBoundary a temporary "master" of its own state. When ',Object(m.b)("inlineCode",{parentName:"p"},"keepValue")," is true on a ParcelBoundary, if that ParcelBoundary propagates a change which it then recieves again with different data, then it will ",Object(m.b)("em",{parentName:"p"},"not")," update its value to the data received from props."),Object(m.b)("p",null,"Consider this example:"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(m.b)("pre",r()({parentName:"div"},{className:"language-js"}),Object(m.b)("code",r()({parentName:"pre"},{className:"language-js"}),Object(m.b)("span",r()({parentName:"code"},{className:"token keyword"}),"let")," numberParcel ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"=")," parcel\n    ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"."),Object(m.b)("span",r()({parentName:"code"},{className:"token function"}),"modifyDown"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",r()({parentName:"code"},{className:"token parameter"}),"number")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token template-string"}),Object(m.b)("span",r()({parentName:"span"},{className:"token template-punctuation string"}),"`"),Object(m.b)("span",r()({parentName:"span"},{className:"token interpolation"}),Object(m.b)("span",r()({parentName:"span"},{className:"token interpolation-punctuation punctuation"}),"${"),"number",Object(m.b)("span",r()({parentName:"span"},{className:"token interpolation-punctuation punctuation"}),"}")),Object(m.b)("span",r()({parentName:"span"},{className:"token template-punctuation string"}),"`")),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")"),"\n    ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"."),Object(m.b)("span",r()({parentName:"code"},{className:"token function"}),"modifyUp"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",r()({parentName:"code"},{className:"token parameter"}),"string")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token function"}),"Number"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),"string",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(m.b)("span",r()({parentName:"code"},{className:"token keyword"}),"return")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),"ParcelBoundary parcel",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),"numberParcel",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}")," keepValue",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">"),"\n    ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",r()({parentName:"code"},{className:"token parameter"}),"parcel"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),"input type",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"="),Object(m.b)("span",r()({parentName:"code"},{className:"token string"}),'"text"')," ",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"{"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"..."),"parcel",Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"."),Object(m.b)("span",r()({parentName:"code"},{className:"token function"}),"spreadDOM"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}")," ",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"/"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"<"),Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),"/"),"ParcelBoundary",Object(m.b)("span",r()({parentName:"code"},{className:"token operator"}),">"),Object(m.b)("span",r()({parentName:"code"},{className:"token punctuation"}),";"),"\n"))),Object(m.b)("p",null,'When a non-numeric string is entered into the input (e.g. "A"), this is turned into ',Object(m.b)("inlineCode",{parentName:"p"},"NaN")," as it passes through ",Object(m.b)("inlineCode",{parentName:"p"},".modifyUp()"),". This is correct from the point of view of the data in the ",Object(m.b)("inlineCode",{parentName:"p"},"numberParcel"),", it's set up so that it should only ever contain a ",Object(m.b)("inlineCode",{parentName:"p"},"Number"),". This triggers an update and a re-render, and ",Object(m.b)("inlineCode",{parentName:"p"},"NaN")," is passed back down to the ParcelBoundary. Setting ",Object(m.b)("inlineCode",{parentName:"p"},"keepValue"),' to true allows ParcelBoundary to remember that it should still contain a string of "A".'),Object(m.b)("p",null,"In the above example, ",Object(m.b)("inlineCode",{parentName:"p"},"keepValue")," also preserves values such as:"),Object(m.b)("ul",null,Object(m.b)("li",{parentName:"ul"},'"0.10" - this would be turned into "0.1" by the modify functions'),Object(m.b)("li",{parentName:"ul"},'"0.0000001" - this would be turned into "1e-7"')),Object(m.b)("p",null,Object(m.b)("strong",{parentName:"p"},Object(m.b)("a",r()({parentName:"strong"},{href:"/data-editing#Modifying-data-to-fit-the-UI"}),"See an example of keepValue"))))}h.isMDXComponent=!0;var g=t(370);a.default=function(){return c.a.createElement(o.a,null,c.a.createElement(s.b,{pageTop:!0,pageBottom:!0,mdxHeading:!0,nav:g.a,pageNav:["# ParcelBoundary","# Children","childRenderer","# Props","parcel","pure","forceUpdate","buffer","debounce","keepValue"]},c.a.createElement(h,null)))}},389:function(e,a,t){"use strict";var n=t(95),c=t.n(n),o=t(96);function s(){var e=c()(["\n    background-color: ",";\n    padding: 1rem;\n    margin-bottom: 1rem;\n    font-size: ",";\n"]);return s=function(){return e},e}a.a=o.b.div(s(),(function(e){return e.theme.colors.bgAlt}),(function(e){return e.theme.fontSizes.s}))},391:function(e,a,t){e.exports=t.p+"static/parcelboundary-5bba317ea1b577eed32a29c39e7dd55c.gif"}}]);
//# sourceMappingURL=component---src-pages-api-parcel-boundary-jsx-d90e7269fbeb6e4e6603.js.map