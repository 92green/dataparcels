import React from 'react';
import useParcelForm from 'react-dataparcels/useParcelForm';
import ParcelBoundary from 'react-dataparcels/ParcelBoundary';
import validation from 'react-dataparcels/validation';

const numberToString = (parcel) => parcel
    .modifyDown(number => `${number}`)
    .modifyUp(string => Number(string));

const InputWithError = (parcel) => <div>
    <input type="text" {...parcel.spreadDOM()} />
    {parcel.meta.invalid && <div>Error: {parcel.meta.invalid}</div>}
</div>;

export default function AnimalEditor(props) {

    let [animalParcel, animalParcelControl] = useParcelForm({
        value: {
            name: "Robert Clamps",
            animals: [
                {type: "Sheep", amount: 6}
            ]
        },
        validation: () => validation({
            'name': value => value ? null : `Name must not be blank`,
            'animals.*.type': value => value ? null : `Animal type must not be blank`,
            'animals.*.amount': [
                value => Number.isInteger(value) ? null : `Animal type must be a whole number`,
                value => value >= 0 ? null : `Animal type must be positive`
            ]
        })
    });

    let animalParcelState = animalParcelControl._outerParcel;
    return <div>
        <label>name</label>
        <ParcelBoundary parcel={animalParcel.get('name')}>
            {InputWithError}
        </ParcelBoundary>

        {animalParcel.get('animals').toArray((animalParcel) => {
            return <ParcelBoundary parcel={animalParcel} key={animalParcel.key}>
                {(animalParcel) => <div>
                    <label>type</label>
                    <ParcelBoundary parcel={animalParcel.get('type')}>
                        {InputWithError}
                    </ParcelBoundary>

                    <label>amount</label>
                    <ParcelBoundary parcel={animalParcel.get('amount').pipe(numberToString)} keepValue>
                        {InputWithError}
                    </ParcelBoundary>

                    <button onClick={() => animalParcel.swapPrev()}>^</button>
                    <button onClick={() => animalParcel.swapNext()}>v</button>
                    <button onClick={() => animalParcel.delete()}>x</button>
                </div>}
            </ParcelBoundary>;
        })}
        <button onClick={() => animalParcel.get('animals').push({type: "?", amount: 0})}>Add new animal</button>

        <button onClick={() => animalParcelControl.submit()}>Submit</button>
        <button onClick={() => animalParcelControl.reset()}>Reset</button>
    </div>;
}
