(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{387:function(e,a,t){"use strict";t.r(a);var n=t(0),c=t.n(n),s=t(369),o=t(368),p=t(9),m=t.n(p),b=t(69),r=t.n(b),N=t(79),l={_frontmatter:{}},d="wrapper";function u(e){var a=e.components,t=r()(e,["components"]);return Object(N.b)(d,m()({},l,t,{components:a,mdxType:"MDXLayout"}),Object(N.b)("h1",{id:"parcel-updaters"},"Parcel updaters"),Object(N.b)("p",null,"Several of the methods on ",Object(N.b)("a",m()({parentName:"p"},{href:"/dataparcels/api/Parcel"}),"Parcel"),' use callbacks known as "parcel updaters". These functions are used to alter a value based off an existing value. There are a few rules around how you can use these updaters, and why you might choose one kind over another.'),Object(N.b)("p",null,"Many examples of these can be seen on ",Object(N.b)("strong",{parentName:"p"},Object(N.b)("a",m()({parentName:"strong"},{href:"/dataparcels/data-editing#Modifying-data-to-fit-the-UI"}),"Modifying data to fit the UI")),"."),Object(N.b)("h2",{id:"simple-value-updaters"},"Simple value updaters"),Object(N.b)("p",null,"Simple value updaters look something like this:"),Object(N.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(N.b)("pre",m()({parentName:"div"},{className:"language-js"}),Object(N.b)("code",m()({parentName:"pre"},{className:"language-js"}),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"update"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token parameter"}),"value")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"=>")," value ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"+")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token number"}),"10"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),";")))),Object(N.b)("p",null,"They provide a value, and expect a new value to be returned."),Object(N.b)("p",null,"When used in ",Object(N.b)("a",m()({parentName:"p"},{href:"/dataparcels/api/Parcel#modifyUp()"}),".modifyUp()")," they will also provide a ",Object(N.b)("a",m()({parentName:"p"},{href:"/dataparcels/api/ChangeRequest"}),"ChangeRequest"),":"),Object(N.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(N.b)("pre",m()({parentName:"div"},{className:"language-js"}),Object(N.b)("code",m()({parentName:"pre"},{className:"language-js"}),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"modifyUp"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token parameter"}),"value",Object(N.b)("span",m()({parentName:"span"},{className:"token punctuation"}),",")," changeRequest"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(N.b)("span",m()({parentName:"code"},{className:"token keyword"}),"return")," changeRequest",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"originPath"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"["),Object(N.b)("span",m()({parentName:"code"},{className:"token number"}),"0"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"===")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token string"}),"'bar'"),"\n        ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"?")," value ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"+")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token number"}),"100"),"\n        ",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),":")," value",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"}"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),";")))),Object(N.b)("p",null,"The simple value updater is safe to use in most simple cases, but in some cases it should not be used."),Object(N.b)("ul",null,Object(N.b)("li",{parentName:"ul"},"If the updater gives you a primitive value or childless value, you can return anything."),Object(N.b)("li",{parentName:"ul"},"If the updater gives you a value that has children, you can always return a primitive value or childless value."),Object(N.b)("li",{parentName:"ul"},"If the updater gives you a value that has children, you can return a value with children ",Object(N.b)("strong",{parentName:"li"},"only if the shape hasn't changed"),".")),Object(N.b)("p",null,"If the updater gives you a value that has children, please ensure you do not change the shape of the value. Changing the data shape or moving children within the data shape can cause dataparcels to misplace its keying and meta information! Dataparcels stores data against each part of a deep value's data structure, so it can only let you change the value if you promise not to alter the shape."),Object(N.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(N.b)("pre",m()({parentName:"div"},{className:"language-js"}),Object(N.b)("code",m()({parentName:"pre"},{className:"language-js"}),Object(N.b)("span",m()({parentName:"code"},{className:"token comment"}),"// example updaters"),"\n",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"update"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token parameter"}),"string")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"=>")," string ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"+")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token string"}),'"!"'),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token comment"}),"// good"),"\n",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"update"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token parameter"}),"string")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"["),"string",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"]"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token comment"}),"// good"),"\n",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"update"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token parameter"}),"date")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"=>")," date",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"toString"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token comment"}),"// good"),"\n",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"update"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token parameter"}),"array")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"=>")," array",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"join"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token string"}),'"."'),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token comment"}),"// good"),"\n",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"update"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token parameter"}),"array")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"=>")," array",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"map"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token parameter"}),"number")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"=>")," number ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"+")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token number"}),"1"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token comment"}),"// good, shape is still the same"),"\n\n",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"update"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token parameter"}),"array")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"=>")," array",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"slice"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token number"}),"0"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),","),Object(N.b)("span",m()({parentName:"code"},{className:"token number"}),"2"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token comment"}),"// bad, shape has changed if array is longer that 2!"),"\n",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"update"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token parameter"}),"array")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"=>")," array",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"reverse"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token comment"}),"// bad, shape has changed because items have moved around!")))),Object(N.b)("p",null,"Simple updaters also do not give you a way to alter ",Object(N.b)("a",m()({parentName:"p"},{href:"/dataparcels/parcel-meta"}),"parcel meta"),". If you need to update the shape of the data or update meta, you can use one of the more advanced updaters below."),Object(N.b)("h2",{id:"asnode"},"asNode"),Object(N.b)("p",null,"Use the ",Object(N.b)("a",m()({parentName:"p"},{href:"/dataparcels/api/ParcelNode"}),"asNode")," updater if you'd like to set ",Object(N.b)("a",m()({parentName:"p"},{href:"/dataparcels/parcel-meta"}),"meta")," in an updater. It will provide you with your Parcel's value wrapped in a ",Object(N.b)("a",m()({parentName:"p"},{href:"/dataparcels/api/ParcelNode"}),"ParcelNode"),", from which you can call ",Object(N.b)("inlineCode",{parentName:"p"},".setMeta()"),"."),Object(N.b)("p",null,"You can also call ",Object(N.b)("inlineCode",{parentName:"p"},".update()")," if you'd like to add, remove or re-arrange child values, which does the same thing as ",Object(N.b)("a",m()({parentName:"p"},{href:"#asChildNodes"}),"asChildNodes")," described below."),Object(N.b)("p",null,"They look something like this:"),Object(N.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(N.b)("pre",m()({parentName:"div"},{className:"language-js"}),Object(N.b)("code",m()({parentName:"pre"},{className:"language-js"}),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"modifyUp"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"asNode"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),"\n    ",Object(N.b)("span",m()({parentName:"code"},{className:"token parameter"}),"node")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"=>")," node",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"setMeta"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"{"),"cool",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token boolean"}),"true"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"}"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),"\n",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")")))),Object(N.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(N.b)("pre",m()({parentName:"div"},{className:"language-js"}),Object(N.b)("code",m()({parentName:"pre"},{className:"language-js"}),Object(N.b)("span",m()({parentName:"code"},{className:"token keyword"}),"import")," asNode ",Object(N.b)("span",m()({parentName:"code"},{className:"token keyword"}),"from")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token string"}),"'dataparcels/asNode'"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(N.b)("span",m()({parentName:"code"},{className:"token keyword"}),"import")," asNode ",Object(N.b)("span",m()({parentName:"code"},{className:"token keyword"}),"from")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token string"}),"'react-dataparcels/asNode'"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),";")))),Object(N.b)("h2",{id:"aschildnodes"},"asChildNodes"),Object(N.b)("p",null,"Use the ",Object(N.b)("a",m()({parentName:"p"},{href:"/dataparcels/api/ParcelNode"}),"asChildNodes")," updater if you'd like to add, remove or re-arrange child values. It will provide you with your Parcel's value, but with all child values replaced with ",Object(N.b)("a",m()({parentName:"p"},{href:"/dataparcels/api/ParcelNode"}),"ParcelNode")," instances. You can move and remove these as you like. You can also insert non-ParcelNode values into the parent data shape to set new data."),Object(N.b)("p",null,"They look something like this:"),Object(N.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(N.b)("pre",m()({parentName:"div"},{className:"language-js"}),Object(N.b)("code",m()({parentName:"pre"},{className:"language-js"}),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"modifyUp"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"asChildNodes"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),"\n    ",Object(N.b)("span",m()({parentName:"code"},{className:"token parameter"}),"array")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"=>")," array",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"filter"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token parameter"}),"node")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"=>")," node",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),"value",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),"isCool",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),"\n",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")")))),Object(N.b)("p",null,"The function ",Object(N.b)("inlineCode",{parentName:"p"},"asChildNodes(updater)")," is equivalent to ",Object(N.b)("inlineCode",{parentName:"p"},"asNode(node => node.update(updater))"),"."),Object(N.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(N.b)("pre",m()({parentName:"div"},{className:"language-js"}),Object(N.b)("code",m()({parentName:"pre"},{className:"language-js"}),Object(N.b)("span",m()({parentName:"code"},{className:"token keyword"}),"import")," asChildNodes ",Object(N.b)("span",m()({parentName:"code"},{className:"token keyword"}),"from")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token string"}),"'dataparcels/asChildNodes'"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(N.b)("span",m()({parentName:"code"},{className:"token keyword"}),"import")," asChildNodes ",Object(N.b)("span",m()({parentName:"code"},{className:"token keyword"}),"from")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token string"}),"'react-dataparcels/asChildNodes'"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),";")))),Object(N.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(N.b)("pre",m()({parentName:"div"},{className:"language-js"}),Object(N.b)("code",m()({parentName:"pre"},{className:"language-js"}),Object(N.b)("span",m()({parentName:"code"},{className:"token keyword"}),"let")," parcel ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"=")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token keyword"}),"new")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token class-name"}),"Parcel"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"["),Object(N.b)("span",m()({parentName:"code"},{className:"token number"}),"1"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),","),Object(N.b)("span",m()({parentName:"code"},{className:"token number"}),"2"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),","),Object(N.b)("span",m()({parentName:"code"},{className:"token number"}),"3"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"]"),"\n",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"}"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(N.b)("span",m()({parentName:"code"},{className:"token comment"}),"// reverse the parcel's children"),"\n",Object(N.b)("span",m()({parentName:"code"},{className:"token keyword"}),"let")," modifiedParcel ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"=")," parcel",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"modifyDown"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"asChildNodes"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),"\n    ",Object(N.b)("span",m()({parentName:"code"},{className:"token parameter"}),"array")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"=>")," array",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"slice"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"reverse"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token comment"}),"// clones and reverses the array of nodes"),"\n",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(N.b)("span",m()({parentName:"code"},{className:"token comment"}),"// new value is [3,2,1]")))),Object(N.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(N.b)("pre",m()({parentName:"div"},{className:"language-js"}),Object(N.b)("code",m()({parentName:"pre"},{className:"language-js"}),Object(N.b)("span",m()({parentName:"code"},{className:"token keyword"}),"let")," parcel ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"=")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token keyword"}),"new")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token class-name"}),"Parcel"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"{"),"foo",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token number"}),"100"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"}"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(N.b)("span",m()({parentName:"code"},{className:"token comment"}),"// set a default value for a child"),"\n",Object(N.b)("span",m()({parentName:"code"},{className:"token keyword"}),"let")," modifiedParcel ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"=")," parcel",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"."),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"modifyDown"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token function"}),"asChildNodes"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),"\n    ",Object(N.b)("span",m()({parentName:"code"},{className:"token parameter"}),"object")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"("),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"{"),"bar",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token number"}),"200"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),",")," ",Object(N.b)("span",m()({parentName:"code"},{className:"token operator"}),"..."),"object",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),"}"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),"\n",Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),")"),Object(N.b)("span",m()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(N.b)("span",m()({parentName:"code"},{className:"token comment"}),"// new value is {bar: 200, foo: 100}")))))}u.isMDXComponent=!0;var i=t(370);a.default=function(){return c.a.createElement(s.a,null,c.a.createElement(o.b,{pageTop:!0,pageBottom:!0,mdxHeading:!0,nav:i.b,pageNav:["# Value Updaters","Simple updaters","asNode","asChildNodes"]},c.a.createElement(u,null)))}}}]);
//# sourceMappingURL=component---src-pages-concepts-parcel-updaters-js-c899b95225f8073cf520.js.map