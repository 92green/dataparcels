(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{383:function(e,a,t){"use strict";t.r(a);var n=t(0),c=t.n(n),s=t(369),o=t(368),p=t(9),l=t.n(p),r=t(69),b=t.n(r),m=t(79),i=t(388),u={_frontmatter:{}},d="wrapper";function N(e){var a=e.components,t=b()(e,["components"]);return Object(m.b)(d,l()({},u,t,{components:a,mdxType:"MDXLayout"}),Object(m.b)("h1",{id:"validation"},"validation"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(m.b)("pre",l()({parentName:"div"},{className:"language-js"}),Object(m.b)("code",l()({parentName:"pre"},{className:"language-js"}),Object(m.b)("span",l()({parentName:"code"},{className:"token keyword"}),"import")," validation ",Object(m.b)("span",l()({parentName:"code"},{className:"token keyword"}),"from")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token string"}),"'dataparcels/validation'"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(m.b)("span",l()({parentName:"code"},{className:"token keyword"}),"import")," validation ",Object(m.b)("span",l()({parentName:"code"},{className:"token keyword"}),"from")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token string"}),"'react-dataparcels/validation'"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),";")))),Object(m.b)("p",null,"Dataparcels' validation plugin provides an easy way to test whether data conforms to a set of validation rules. This is most useful when ",Object(m.b)("a",l()({parentName:"p"},{href:"/dataparcels/ui-behaviour#Validation-on-user-input"}),"checking if user input is correct before allowing changes to be submitted"),"."),Object(m.b)("p",null,"Once configured, it provides function that can be run against Parcel data, and it will set ",Object(m.b)("a",l()({parentName:"p"},{href:"/dataparcels/parcel-meta"}),"Parcel meta")," wherever data is invalid, and also block any ",Object(m.b)("inlineCode",{parentName:"p"},"submit()")," actions unless all data is valid."),Object(m.b)("h3",{id:"example-usage"},"Example usage"),Object(m.b)("p",null,"Please refer to the UI Behaviour page to see ",Object(m.b)("a",l()({parentName:"p"},{href:"/dataparcels/ui-behaviour#Validation-on-user-input"}),"a full example"),"."),Object(m.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(m.b)("pre",l()({parentName:"div"},{className:"language-js"}),Object(m.b)("code",l()({parentName:"pre"},{className:"language-js"}),Object(m.b)("span",l()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),",")," parcelControl",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token function"}),"useParcelForm"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(m.b)("span",l()({parentName:"code"},{className:"token function-variable function"}),"beforeChange"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token function"}),"validation"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"{"),"\n        ",Object(m.b)("span",l()({parentName:"code"},{className:"token string"}),"'name'"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token parameter"}),"value")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token operator"}),"=>")," value ",Object(m.b)("span",l()({parentName:"code"},{className:"token operator"}),"?")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token keyword"}),"null")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token template-string"}),Object(m.b)("span",l()({parentName:"span"},{className:"token template-punctuation string"}),"`"),Object(m.b)("span",l()({parentName:"span"},{className:"token string"}),"Name must not be blank"),Object(m.b)("span",l()({parentName:"span"},{className:"token template-punctuation string"}),"`")),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),","),"\n        ",Object(m.b)("span",l()({parentName:"code"},{className:"token string"}),"'animals.*.type'"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token parameter"}),"value")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token operator"}),"=>")," value ",Object(m.b)("span",l()({parentName:"code"},{className:"token operator"}),"?")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token keyword"}),"null")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token template-string"}),Object(m.b)("span",l()({parentName:"span"},{className:"token template-punctuation string"}),"`"),Object(m.b)("span",l()({parentName:"span"},{className:"token string"}),"Animal type must not be blank"),Object(m.b)("span",l()({parentName:"span"},{className:"token template-punctuation string"}),"`")),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),","),"\n        ",Object(m.b)("span",l()({parentName:"code"},{className:"token string"}),"'animals.*.amount'"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"["),"\n            ",Object(m.b)("span",l()({parentName:"code"},{className:"token parameter"}),"value")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token operator"}),"=>")," Number",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"."),Object(m.b)("span",l()({parentName:"code"},{className:"token function"}),"isInteger"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"("),"value",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token operator"}),"?")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token keyword"}),"null")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token template-string"}),Object(m.b)("span",l()({parentName:"span"},{className:"token template-punctuation string"}),"`"),Object(m.b)("span",l()({parentName:"span"},{className:"token string"}),"Animal type must be a whole number"),Object(m.b)("span",l()({parentName:"span"},{className:"token template-punctuation string"}),"`")),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),","),"\n            ",Object(m.b)("span",l()({parentName:"code"},{className:"token parameter"}),"value")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token operator"}),"=>")," value ",Object(m.b)("span",l()({parentName:"code"},{className:"token operator"}),">=")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token number"}),"0")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token operator"}),"?")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token keyword"}),"null")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token template-string"}),Object(m.b)("span",l()({parentName:"span"},{className:"token template-punctuation string"}),"`"),Object(m.b)("span",l()({parentName:"span"},{className:"token string"}),"Animal type must be positive"),Object(m.b)("span",l()({parentName:"span"},{className:"token template-punctuation string"}),"`")),"\n        ",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"]"),"\n    ",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),")"),"\n    ",Object(m.b)("span",l()({parentName:"code"},{className:"token comment"}),"// ^ run validator before data updates"),"\n",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(m.b)("span",l()({parentName:"code"},{className:"token comment"}),"// parcel.get('name').meta.invalid will contain `Name must not be blank` if it is blank, or null otherwise"),"\n",Object(m.b)("span",l()({parentName:"code"},{className:"token comment"}),"// parcel.meta.valid will contain true if all validation rules pass, or false otherwise"),"\n",Object(m.b)("span",l()({parentName:"code"},{className:"token comment"}),"// parcelControl.submit() will only work if all validation rules pass")))),Object(m.b)("h2",{id:"arguments"},"Arguments"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(m.b)("pre",l()({parentName:"div"},{className:"language-flow"}),Object(m.b)("code",l()({parentName:"pre"},{className:"language-flow"}),Object(m.b)("span",l()({parentName:"code"},{className:"token function"}),"validation"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"("),"validationRuleMap",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),":")," ValidationRuleMap",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token operator"}),"=>")," ParcelUpdater",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(m.b)("span",l()({parentName:"code"},{className:"token keyword"}),"type")," ValidationRuleMap ",Object(m.b)("span",l()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"["),"matchPath",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token type tag"}),"string"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"]"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),":")," ValidationRule",Object(m.b)("span",l()({parentName:"code"},{className:"token operator"}),"|"),"ValidationRule",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"["),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"]"),"\n",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(m.b)("span",l()({parentName:"code"},{className:"token keyword"}),"type")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token function-variable function"}),"ValidationRule")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),"("),"value",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token type tag"}),"any"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),",")," keyPath",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),":")," Array",Object(m.b)("span",l()({parentName:"code"},{className:"token operator"}),"<"),Object(m.b)("span",l()({parentName:"code"},{className:"token type tag"}),"number"),Object(m.b)("span",l()({parentName:"code"},{className:"token operator"}),"|"),Object(m.b)("span",l()({parentName:"code"},{className:"token type tag"}),"string"),Object(m.b)("span",l()({parentName:"code"},{className:"token operator"}),">"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),",")," topLevelValue",Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token type tag"}),"any"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",l()({parentName:"code"},{className:"token type tag"}),"any"),Object(m.b)("span",l()({parentName:"code"},{className:"token punctuation"}),";")))),Object(m.b)("p",null,"The ",Object(m.b)("inlineCode",{parentName:"p"},"validation")," function requires a single argument, a validation rule map."),Object(m.b)("ul",null,Object(m.b)("li",{parentName:"ul"},Object(m.b)(i.a,{name:"validationRuleMap",type:"Object",mdxType:"Param"}),"A validationRuleMap is an object containing strings for keys and functions, or arrays of functions as values.")),Object(m.b)("h3",{id:"match-paths"},"Match paths"),Object(m.b)("p",null,"Match paths are strings that indicate which parts of the Parcel's data shape to run the associated validation rule(s) against. Dots (",Object(m.b)("inlineCode",{parentName:"p"},"."),") indicate nested properties, and asterisks (",Object(m.b)("inlineCode",{parentName:"p"},"*"),") indicate wildcards."),Object(m.b)("ul",null,Object(m.b)("li",{parentName:"ul"},Object(m.b)("inlineCode",{parentName:"li"},"name")," matches a property called ",Object(m.b)("inlineCode",{parentName:"li"},"name")),Object(m.b)("li",{parentName:"ul"},Object(m.b)("inlineCode",{parentName:"li"},"animals.*")," matches all elements of a property called ",Object(m.b)("inlineCode",{parentName:"li"},"animals")),Object(m.b)("li",{parentName:"ul"},Object(m.b)("inlineCode",{parentName:"li"},"animals.*.type")," matches all properties called ",Object(m.b)("inlineCode",{parentName:"li"},"type")," on all elements of a property called ",Object(m.b)("inlineCode",{parentName:"li"},"animals"))),Object(m.b)("h3",{id:"validation-rules"},"Validation rules"),Object(m.b)("p",null,"Validation rules are functions that should return something if the data being validates is invalid. Usually this is a string describing why the data is invalid, which can be rendered in the form."),Object(m.b)("p",null,"If the data is valid, ",Object(m.b)("inlineCode",{parentName:"p"},"null")," should be returned."),Object(m.b)("h4",{id:"validation-rules-arguments"},"Validation rules arguments"),Object(m.b)("ul",null,Object(m.b)("li",{parentName:"ul"},Object(m.b)(i.a,{name:"value",type:"any",mdxType:"Param"}),"The value to be validated, which will be called on each piece of data matched by the match path."),Object(m.b)("li",{parentName:"ul"},Object(m.b)(i.a,{name:"keyPath",type:"any[]",mdxType:"Param"}),"The current key path."),Object(m.b)("li",{parentName:"ul"},Object(m.b)(i.a,{name:"topLevelValue",type:"any",mdxType:"Param"}),"The top level value of the Parcel who the validator is being run against.")),Object(m.b)("h2",{id:"returns"},"Returns"),Object(m.b)("p",null,"The ",Object(m.b)("inlineCode",{parentName:"p"},"validation")," function returns a ",Object(m.b)("inlineCode",{parentName:"p"},"ParcelUpdater")," function, which is most suitable to be passed into ",Object(m.b)("a",l()({parentName:"p"},{href:"/dataparcels/api/useParcelForm#beforeUpdate"}),"useParcelForm.beforeUpdate"),", ",Object(m.b)("a",l()({parentName:"p"},{href:"/dataparcels/api/useParcelBuffer#beforeUpdate"}),"useParcelBuffer.beforeUpdate")," or ",Object(m.b)("a",l()({parentName:"p"},{href:"/dataparcels/api/useParcelState#beforeUpdate"}),"useParcelState.beforeUpdate"),"."),Object(m.b)("p",null,"This returned function is often used with ",Object(m.b)("a",l()({parentName:"p"},{href:"/dataparcels/api/useParcelForm#validation"}),"useParcelForm"),"."),Object(m.b)("h2",{id:"meta"},"Meta"),Object(m.b)("p",null,"This validation plugin sets the following meta:"),Object(m.b)("ul",null,Object(m.b)("li",{parentName:"ul"},Object(m.b)(i.a,{name:"${top level}.meta.valid",type:"boolean",mdxType:"Param"}),"A boolean on the top level parcel indicating if the entire form is valid."),Object(m.b)("li",{parentName:"ul"},Object(m.b)(i.a,{name:"${top level}.meta.invalidList",type:"Array",mdxType:"Param"}),"An array on the top level parcel containing the error outputs of all invalid fields."),Object(m.b)("li",{parentName:"ul"},Object(m.b)(i.a,{name:"${top level}.meta.showInvalid",type:"boolean",mdxType:"Param"}),"A boolean that describes if invalid fields are being processed. Invalid fields are not processed until first attempted submit, then they are processed every time data changes."),Object(m.b)("li",{parentName:"ul"},Object(m.b)(i.a,{name:"${each field}.meta.invalid",type:"any",mdxType:"Param"}),"On each validated field, `meta.invalid` will contain the result of the validation rule.")),Object(m.b)("p",null,"An example of how this meta can be used ",Object(m.b)("a",l()({parentName:"p"},{href:"/dataparcels/ui-behaviour#Validation-on-user-input"}),"can be found here"),"."))}N.isMDXComponent=!0;var j=t(370);a.default=function(){return c.a.createElement(s.a,null,c.a.createElement(o.b,{pageTop:!0,pageBottom:!0,mdxHeading:!0,nav:j.a,pageNav:["# validation","Arguments","Match paths","Validation rules","Returns","Meta"]},c.a.createElement(N,null)))}},388:function(e,a,t){"use strict";var n=t(0),c=t.n(n),s=t(367),o=t(150);a.a=function(e){var a=e.default,t=e.name,n=e.optional,p=e.type;return c.a.createElement(o.a,{mb:3},c.a.createElement(s.d,{textStyle:"h4"},t)," ",c.a.createElement(s.d,{textStyle:"codeType"},n?"?":"",": ",p," ",a?"= ".concat(a):""))}}}]);
//# sourceMappingURL=component---src-pages-api-validation-jsx-547a881b1bd2da4b4daf.js.map