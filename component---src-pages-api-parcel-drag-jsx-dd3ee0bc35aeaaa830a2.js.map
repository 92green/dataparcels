{"version":3,"sources":["webpack:///./src/mdx/api/ParcelDrag.mdx","webpack:///./src/pages/api/ParcelDrag.jsx","webpack:///./src/component/Param.jsx","webpack:///./src/examples/EditingArraysDragSource.txt"],"names":["layoutProps","_frontmatter","MDXLayout","MDXContent","components","props","mdxType","parentName","bounded","language","EditingArraysDragSource","textStyle","Param","name","type","id","isMDXComponent","pageTop","pageBottom","mdxHeading","nav","pageNav","def","optional","mb","module","exports"],"mappings":"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","file":"component---src-pages-api-parcel-drag-jsx-dd3ee0bc35aeaaa830a2.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport EditingArraysDragSource from 'examples/EditingArraysDragSource.txt';\nimport Param from 'component/Param';\nimport { CodeHighlight } from 'dcme-style';\nimport { Pre } from 'dcme-style/affordance';\nimport { Text } from 'dcme-style/affordance';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"parceldrag\"\n    }}>{`ParcelDrag`}</h1>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"js\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-js\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-js\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`import`}</span>{` ParcelDrag `}<span parentName=\"code\" {...{\n            \"className\": \"token keyword\"\n          }}>{`from`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token string\"\n          }}>{`'react-dataparcels-drag'`}</span><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`;`}</span></code></pre></div>\n    <p>{`Dataparcels' drag plugin provides an easy way to add drag and drop sorting to arrays of items. It uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/clauderic/react-sortable-hoc\",\n        \"target\": \"_blank\",\n        \"rel\": [\"nofollow\", \"noopener\", \"noreferrer\"]\n      }}>{`react-sortable-hoc`}<span parentName=\"a\">{``}</span></a>{` to perform the dragging and sorting, and all of `}<inlineCode parentName=\"p\">{`react-sortable-hoc`}</inlineCode>{`s API is accessible to use via ParcelDrag.`}</p>\n    <h3 {...{\n      \"id\": \"example-usage\"\n    }}>{`Example usage`}</h3>\n    <p>{`Please refer to the UI Behaviour page to see `}<a parentName=\"p\" {...{\n        \"href\": \"/ui-behaviour/#Drag-and-drop-sorting\"\n      }}>{`a full example`}</a>{`.`}</p>\n    <Pre bounded mdxType=\"Pre\">\n    <CodeHighlight language=\"jsx\" mdxType=\"CodeHighlight\">{EditingArraysDragSource}</CodeHighlight>\n    </Pre>\n    <h2 {...{\n      \"id\": \"children\"\n    }}><Text textStyle=\"weaker\" mdxType=\"Text\">{`Children`}</Text></h2>\n    <h3 {...{\n      \"id\": \"childrenderer\"\n    }}>{`childRenderer`}</h3>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"flow\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-flow\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-flow\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`(`}</span>{`parcel`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` Parcel`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`)`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`=>`}</span>{` Node`}</code></pre></div>\n    <p>{`ParcelDrag must be given a `}<inlineCode parentName=\"p\">{`childRenderer`}</inlineCode>{` function as children. This is called when rendering each child element, passing the Parcel for each element.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <Param name=\"parcel\" type=\"Parcel\" mdxType=\"Param\" />\n        <p parentName=\"li\">{`The Parcel for each element being rendered`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"props\"\n    }}><Text textStyle=\"weaker\" mdxType=\"Text\">{`Props`}</Text></h2>\n    <h3 {...{\n      \"id\": \"parcel\"\n    }}>{`parcel`}</h3>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"flow\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-flow\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-flow\"\n        }}>{`parcel`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` Parcel`}</code></pre></div>\n    <p>{`The Parcel that will be sortable. This Parcel must be of type `}<a parentName=\"p\" {...{\n        \"href\": \"/parcel-types#IndexedParcel\"\n      }}>{`IndexedParcel`}</a>{`, and an error will be thrown if it is not.`}</p>\n    <h3 {...{\n      \"id\": \"container\"\n    }}>{`container`}</h3>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"flow\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-flow\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-flow\"\n        }}>{`container`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` ComponentType`}<span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`<`}</span><span parentName=\"code\" {...{\n            \"className\": \"token type tag\"\n          }}>{`any`}</span><span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`>`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token comment\"\n          }}>{`// optional, defaults to 'div'`}</span></code></pre></div>\n    <p>{`The container element to render around the children. Defaults to `}<inlineCode parentName=\"p\">{`'div'`}</inlineCode>{`.`}</p>\n    <a id=\"sortableElementProps\" />\n    <h3 {...{\n      \"id\": \"sortableelementprops\"\n    }}>{`...sortableElementProps`}</h3>\n    <div {...{\n      \"className\": \"gatsby-highlight\",\n      \"data-language\": \"flow\"\n    }}><pre parentName=\"div\" {...{\n        \"className\": \"language-flow\"\n      }}><code parentName=\"pre\" {...{\n          \"className\": \"language-flow\"\n        }}><span parentName=\"code\" {...{\n            \"className\": \"token operator\"\n          }}>{`...`}</span>{`sortableElementProps`}<span parentName=\"code\" {...{\n            \"className\": \"token punctuation\"\n          }}>{`:`}</span>{` `}<span parentName=\"code\" {...{\n            \"className\": \"token type tag\"\n          }}>{`any`}</span></code></pre></div>\n    <p>{`Any additional props will be passed onto `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/clauderic/react-sortable-hoc#sortableelement-hoc\",\n        \"target\": \"_blank\",\n        \"rel\": [\"nofollow\", \"noopener\", \"noreferrer\"]\n      }}>{`react-sortable-hoc's SortableContainer hoc`}<span parentName=\"a\">{``}</span></a>{`, to allow configuration of how the dragging behaves.`}</p>\n    <p>{`Note that `}<inlineCode parentName=\"p\">{`SortableContainer`}</inlineCode>{`'s `}<inlineCode parentName=\"p\">{`onSortEnd`}</inlineCode>{` prop is not required, as it's provided by ParcelDrag. If you pass an `}<inlineCode parentName=\"p\">{`onSortEnd`}</inlineCode>{` prop to ParcelDrag, it will fire immediately after the Parcel triggers its change request.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","// @flow\nimport React from 'react';\nimport Page from 'component/Page';\nimport {ContentNav} from 'dcme-style';\nimport DragMarkdown from 'mdx/api/ParcelDrag.mdx';\nimport {apiNav} from 'nav/apiNav';\n\nexport default () => <Page>\n    <ContentNav\n        pageTop\n        pageBottom\n        mdxHeading\n        nav={apiNav}\n        pageNav={[\n            '# ParcelDrag',\n            '# Children',\n            'childRenderer',\n            '# Props',\n            'parcel',\n            'container',\n            '...sortableElementProps'\n        ]}\n    >\n        <DragMarkdown />\n    </ContentNav>\n</Page>;\n","// @flow\nimport React from 'react';\nimport {Text} from 'dcme-style/affordance';\nimport {Box} from 'dcme-style/layout';\n\ntype Props = {\n    default?: string,\n    name: string,\n    optional?: boolean,\n    type: string\n};\n\nexport default (props: Props) => {\n    let {default: def, name, optional, type} = props;\n    return <Box mb={3}>\n        <Text textStyle=\"h4\">{name}</Text> <Text textStyle=\"codeType\">{optional ? \"?\" : \"\"}: {type} {def ? `= ${def}` : \"\"}</Text>\n    </Box>;\n};\n","module.exports = \"import React from 'react';\\nimport useParcelState from 'react-dataparcels/useParcelState';\\nimport ParcelBoundary from 'react-dataparcels/ParcelBoundary';\\nimport ParcelDrag from 'react-dataparcels-drag';\\n\\nexport default function FruitListEditor(props) {\\n\\n    let [fruitListParcel] = useParcelState({\\n        value: [\\n            \\\"Apple\\\",\\n            \\\"Banana\\\",\\n            \\\"Crumpets\\\"\\n        ]\\n    });\\n\\n    return <div>\\n        <ParcelDrag parcel={fruitListParcel}>\\n            {(fruitParcel) => <ParcelBoundary parcel={fruitParcel}>\\n                {(parcel) => <div>\\n                    <input type=\\\"text\\\" {...parcel.spreadDOM()} />\\n                    <button onClick={() => parcel.insertAfter(`${parcel.value} copy`)}>+</button>\\n                    <button onClick={() => parcel.delete()}>x</button>\\n                </div>}\\n            </ParcelBoundary>}\\n        </ParcelDrag>\\n        <button onClick={() => fruitListParcel.push(\\\"New fruit\\\")}>Add new fruit</button>\\n    </div>;\\n}\\n\""],"sourceRoot":""}