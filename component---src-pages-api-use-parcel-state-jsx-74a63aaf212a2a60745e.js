(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{381:function(e,a,t){"use strict";t.r(a);var n=t(0),c=t.n(n),s=t(368),o=t(367),p=t(12),b=t.n(p),r=t(93),l=t.n(r),m=t(78),u=t(120),N=t(370),i=t(384),d=t(371),j=t(388),O=t.n(j),h=t(385),k={_frontmatter:{}},g="wrapper";function f(e){var a=e.components,t=l()(e,["components"]);return Object(m.b)(g,b()({},k,t,{components:a,mdxType:"MDXLayout"}),Object(m.b)("h1",{id:"useparcelstate"},"useParcelState"),Object(m.b)(N.a,{src:O.a,mdxType:"ApiPageIcon"}),Object(m.b)("p",null,"The useParcelState function is a React hook. Its job is to provide you with a ",Object(m.b)("a",b()({parentName:"p"},{href:"/api/Parcel"}),"Parcel")," stored in React state, and to handle how the parcel responds to changes in React props."),Object(m.b)("p",null,"By default, useParcelState operates in a similar way to an ",Object(m.b)("a",b()({parentName:"p"},{href:"https://reactjs.org/docs/uncontrolled-components.html",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"uncontrolled component",Object(m.b)("span",{parentName:"a"},"")),", accepting an initial value once on first mount, and then becoming the master of its own state from then on. This behaviour can be changed using the ",Object(m.b)("a",b()({parentName:"p"},{href:"#updateValue"}),"updateValue")," parameter."),Object(m.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"import")," useParcelState ",Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"from")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token string"}),"'react-dataparcels/useParcelState'"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";")))),Object(m.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-flow"}),Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelState"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token type tag"}),"any"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// optional"),"\n    updateValue",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token type tag"}),"boolean"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    rebase",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token type tag"}),"boolean"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    onChange",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token type tag"}),"Function"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    onChangeUseResult",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token type tag"}),"boolean"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    beforeChange",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token type tag"}),"Function"),Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"|"),Object(m.b)("span",b()({parentName:"code"},{className:"token type tag"}),"Function"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]"),"\n",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";")))),Object(m.b)(i.a,{mdxType:"Message"},"If you want a submittable form, or if you'd like to debounce your onChange function, consider using ",Object(m.b)(u.b,{to:"/api/useParcelForm",mdxType:"Link"},"useParcelForm"),"."),Object(m.b)("h2",{id:"params"},Object(m.b)(u.d,{textStyle:"weak",mdxType:"Text"},"Params")),Object(m.b)("h3",{id:"value"},"value"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-flow"}),"value",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token type tag"}),"any")))),Object(m.b)("p",null,"Sets the initial value to be put into useParcelState's Parcel."),Object(m.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelState"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token number"}),"100"),"\n",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// parcel.value is 100"),"\n\nparcel",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"."),Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"set"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token number"}),"200"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// set() triggers a change and a re-render"),"\n",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// parcel.value is now 200")))),Object(m.b)("p",null,"If computing ",Object(m.b)("inlineCode",{parentName:"p"},"value")," is a heavy operation, you can return the value from a function. The function will only be called on initial mount, and is passed the previous value. However, if ",Object(m.b)("inlineCode",{parentName:"p"},"updateValue")," is set to true then the function will be called on every update."),Object(m.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," newValue ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token number"}),"100"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelState"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(m.b)("span",b()({parentName:"code"},{className:"token function-variable function"}),"value"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token parameter"}),"prevValue"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," newValue\n",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// parcel.value is 100")))),Object(m.b)("p",null,"Value can also accept ",Object(m.b)("a",b()({parentName:"p"},{href:"/parcel-updaters"}),"parcel updaters"),". These pass the previous data held in state, and expect the new data to be returned. These can be useful for setting ",Object(m.b)("a",b()({parentName:"p"},{href:"/parcel-meta"}),"parcel meta"),"."),Object(m.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"import")," asNode ",Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"from")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token string"}),"'react-dataparcels/asNode'"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelState"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"asNode"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token parameter"}),"node")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," node\n        ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"."),Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"update"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," newValue",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),"\n        ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"."),Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"setMeta"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n            foo",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token boolean"}),"true"),"\n        ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),"\n    ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),"\n",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";")))),Object(m.b)("h4",{id:"returning-promises-from-value"},"Returning promises from value"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"import")," asyncValue ",Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"from")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token string"}),"'react-dataparcels/asyncValue'"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelState"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"asyncValue"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"async")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n        ",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// add logic here"),"\n        ",Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"return")," theValue",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n    ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),"\n",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";")))),Object(m.b)("p",null,"It's possible to return a value from a promise using the ",Object(m.b)("inlineCode",{parentName:"p"},"asyncValue")," function. The ",Object(m.b)("inlineCode",{parentName:"p"},"useParcelState")," hook's parcel has a value of ",Object(m.b)("inlineCode",{parentName:"p"},"undefined")," until the promise resolves. Once it has resolved, ",Object(m.b)("inlineCode",{parentName:"p"},"useParcelState")," hook's parcel has a value of the result of the async function."),Object(m.b)("p",null,"When using ",Object(m.b)("inlineCode",{parentName:"p"},"asyncValue")," you will also receive its status via ",Object(m.b)("a",b()({parentName:"p"},{href:"#valueStatus"}),"valueStatus"),"."),Object(m.b)("h3",{id:"updatevalue"},"updateValue"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-flow"}),"updateValue",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token type tag"}),"boolean")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token boolean"}),"false")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// optional")))),Object(m.b)("p",null,"When ",Object(m.b)("inlineCode",{parentName:"p"},"updateValue")," is set to true during an update, the useParcelState hook will check to see if ",Object(m.b)("inlineCode",{parentName:"p"},"value")," has changed, and will update its Parcel's value if so. This will completely replace any changes that may have happened to the Parcel since the last time ",Object(m.b)("inlineCode",{parentName:"p"},"value")," was put into the Parcel."),Object(m.b)("p",null,"Note that it will also cause any downstream ",Object(m.b)("a",b()({parentName:"p"},{href:"/api/useParcelBuffer#parcel"}),"useParcelBuffer")," hooks and ",Object(m.b)("a",b()({parentName:"p"},{href:"/api/ParcelBoundary#parcel"}),"ParcelBoundaries")," to forget all their buffered changes, unless ",Object(m.b)("a",b()({parentName:"p"},{href:"#rebase"}),"rebase")," is used."),Object(m.b)("p",null,"Value changes are detected using ",Object(m.b)("inlineCode",{parentName:"p"},"Object.is()"),", comparing the new ",Object(m.b)("inlineCode",{parentName:"p"},"value")," with the previous one."),Object(m.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// receivedValue is 100"),"\n\n",Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelState"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," receivedValue",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    updateValue",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token boolean"}),"true"),"\n",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// parcel.value is 100"),"\n\nparcel",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"."),Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"set"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token number"}),"200"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// set() triggers a change and a re-render"),"\n",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// parcel.value is now 200"),"\n\n",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// if component updates and receivedValue is now 300"),"\n",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// then parcel.value is now 300")))),Object(m.b)("h3",{id:"rebase"},"rebase"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-flow"}),"rebase",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token type tag"}),"boolean")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token boolean"}),"false")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// optional")))),Object(m.b)("p",null,"As described above, updates caused by ",Object(m.b)("inlineCode",{parentName:"p"},"updateValue")," will cause any downstream ",Object(m.b)("a",b()({parentName:"p"},{href:"/api/useParcelBuffer#parcel"}),"useParcelBuffer")," hooks and ",Object(m.b)("a",b()({parentName:"p"},{href:"/api/ParcelBoundary#parcel"}),"ParcelBoundaries")," to forget all their buffered changes. This is safe default behaviour because changes in the downstream buffers may not be compatible with the new Parcel's data shape. However it may be user unfriendly in some cases, depending on when and how often the parcel updates."),Object(m.b)("p",null,"Setting ",Object(m.b)("inlineCode",{parentName:"p"},"rebase")," to true will prevent downstream buffers from being cleared."),Object(m.b)("h4",{id:"please-note"},"Please note"),Object(m.b)("p",null,"Only use this if the shape of your data does not change, so that downstream buffered changes are compatible with the new Parcel's data shape."),Object(m.b)("p",null,"This restriction will be lifted in future with the introduction of a feature known as ",Object(m.b)("em",{parentName:"p"},"rekey"),"."),Object(m.b)("h3",{id:"onchange"},"onChange"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-flow"}),"onChange",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),"parcel",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," Parcel",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),",")," changeRequest",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ChangeRequest",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token type tag"}),"any")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// optional")))),Object(m.b)("p",null,"If provided, this function is called whenever useParcelState's Parcel has handled a change. It receives the new ",Object(m.b)("a",b()({parentName:"p"},{href:"/api/Parcel"}),"Parcel"),", and the ",Object(m.b)("a",b()({parentName:"p"},{href:"/api/ChangeRequest"}),"ChangeRequest")," that was responsible for the change."),Object(m.b)("p",null,"This function can be used to relay changes further up the React heirarchy."),Object(m.b)("p",null,"Please keep in mind that it is possible for a change to result in the same data being contained in the Parcel, ",Object(m.b)("inlineCode",{parentName:"p"},"onChange")," will not dedupe subsequent calls whose Parcels contain the same data. ",Object(m.b)("a",b()({parentName:"p"},{href:"/api/ChangeRequest#hasValueChanged"}),"ChangeRequest.hasValueChanged()")," can help with that."),Object(m.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelState"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(m.b)("span",b()({parentName:"code"},{className:"token function-variable function"}),"onChange"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token parameter"}),"parcel",Object(m.b)("span",b()({parentName:"span"},{className:"token punctuation"}),",")," changeRequest"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n        ",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// add logic here"),"\n    ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";")))),Object(m.b)("h4",{id:"returning-promises-from-onchange"},"Returning promises from onChange"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"import")," asyncChange ",Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"from")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token string"}),"'react-dataparcels/asyncChange'"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelState"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    onChange",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"asyncChange"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"async")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token parameter"}),"parcel",Object(m.b)("span",b()({parentName:"span"},{className:"token punctuation"}),",")," changeRequest"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n        ",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// add logic here"),"\n    ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),"\n",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";")))),Object(m.b)("p",null,"It's possible to return a promise from ",Object(m.b)("inlineCode",{parentName:"p"},"onChange")," using the ",Object(m.b)("inlineCode",{parentName:"p"},"asyncChange")," function. When doing this, the change does not enter the hook's state until the promise resolves."),Object(m.b)("p",null,"If another change arrives while a promise is still pending, it will be passed through ",Object(m.b)("inlineCode",{parentName:"p"},"onChange")," after the first promise is resolved or rejected. This is to ensure that there is only one operation happening at a time. If the first ChangeRequest's\npromise is rejected, the changes will be merged with the next ChangeRequest when ",Object(m.b)("inlineCode",{parentName:"p"},"onChange")," is called the second time."),Object(m.b)("p",null,"This is discussed in more detail in ",Object(m.b)("a",b()({parentName:"p"},{href:"/data-synchronisation"}),"data synchronisation"),"."),Object(m.b)("p",null,"When using ",Object(m.b)("inlineCode",{parentName:"p"},"asyncChange")," you will also receive its status via ",Object(m.b)("a",b()({parentName:"p"},{href:"#changeStatus"}),"changeStatus"),"."),Object(m.b)("h3",{id:"onchangeuseresult"},"onChangeUseResult"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-flow"}),"onChangeUseResult",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token type tag"}),"boolean")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token boolean"}),"false")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// optional")))),Object(m.b)("p",null,"When true, this sets the value of the hook's parcel to the return value of ",Object(m.b)("inlineCode",{parentName:"p"},"onChange"),"."),Object(m.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelState"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," receivedValue",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(m.b)("span",b()({parentName:"code"},{className:"token function-variable function"}),"onChange"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token parameter"}),"parcel",Object(m.b)("span",b()({parentName:"span"},{className:"token punctuation"}),",")," changeRequest"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n        ",Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"return")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"saveMyData"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),"parcel",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"."),"value",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n        ",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// ^ saveMyData send a request to a server to save the data,"),"\n        ",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// and returns a promise containing the updated data from the server"),"\n    ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    onChangeUseResult",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token boolean"}),"true"),"\n",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";")))),Object(m.b)("p",null,"Note that it will also cause any downstream ",Object(m.b)("a",b()({parentName:"p"},{href:"/api/useParcelBuffer#parcel"}),"useParcelBuffer")," hooks and ",Object(m.b)("a",b()({parentName:"p"},{href:"/api/ParcelBoundary#parcel"}),"ParcelBoundaries")," to forget all their buffered changes, unless ",Object(m.b)("a",b()({parentName:"p"},{href:"#rebase"}),"rebase")," is used."),Object(m.b)("h3",{id:"beforechange"},"beforeChange"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-flow"}),"beforeChange",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ParcelUpdater",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"|"),"ParcelUpdater",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),"// optional"),"\n\n",Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"type")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token function-variable function"}),"ParcelUpdater")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),"value",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token type tag"}),"any"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),",")," changeRequest",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ChangeRequest",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token type tag"}),"any"),"\n",Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"type")," ParcelUpdater ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"asNode"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),"node",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ParcelNode",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),",")," changeRequest",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ChangeRequest",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," ParcelNode",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"type")," ParcelUpdater ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"asChildNodes"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),"nodes",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token type tag"}),"any"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),",")," changeRequest",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ChangeRequest",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token type tag"}),"any"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";")))),Object(m.b)("p",null,"The ",Object(m.b)("inlineCode",{parentName:"p"},"beforeChange")," parameter accepts either a single function, or an array of functions. Whenever a new ",Object(m.b)("inlineCode",{parentName:"p"},"value")," is taken into useParcelState from params, and whenever the useParcelState hook recieves a change from below, the change is passed through each ",Object(m.b)("inlineCode",{parentName:"p"},"beforeChange")," function."),Object(m.b)("p",null,"Internally the useParcelBuffer hook uses ",Object(m.b)("a",b()({parentName:"p"},{href:"/api/Parcel#modifyUp()"}),"Parcel.modifyUp()")," on each of the ",Object(m.b)("inlineCode",{parentName:"p"},"beforeChange")," functions. If more than one function is passed to ",Object(m.b)("inlineCode",{parentName:"p"},"beforeChange"),", the change will go through the first function in the array first, then the second etc."),Object(m.b)("p",null,"This is particularly useful for setting ",Object(m.b)("a",b()({parentName:"p"},{href:"data-editing#Deriving-meta"}),"derived data"),", and plugins such as ",Object(m.b)("a",b()({parentName:"p"},{href:"/api/validation"}),"validation")," are built to be passed into ",Object(m.b)("inlineCode",{parentName:"p"},"beforeChange"),"."),Object(m.b)(h.a,{mdxType:"ValueUpdater"}),Object(m.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelState"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token string"}),'"ABC"'),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(m.b)("span",b()({parentName:"code"},{className:"token function-variable function"}),"beforeChange"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token parameter"}),"value")," ",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," value",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"."),Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"toLowerCase"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),"\n",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),'// ^ "ABC" will be passed through `beforeChange`'),"\n",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),'// and useParcelState\'s Parcel will contain a value of "abc"'),"\n",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),'// parcel.value is now "abc"'),"\n\nparcel",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"."),Object(m.b)("span",b()({parentName:"code"},{className:"token function"}),"set"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(m.b)("span",b()({parentName:"code"},{className:"token string"}),'"HELLO"'),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),'// ^ "HELLO" will be passed through `beforeChange`'),"\n",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),'// and useParcelState\'s Parcel will contain a value of "hello"'),"\n",Object(m.b)("span",b()({parentName:"code"},{className:"token comment"}),'// parcel.value is now "hello"')))),Object(m.b)("h2",{id:"returns"},Object(m.b)(u.d,{textStyle:"weak",mdxType:"Text"},"Returns")),Object(m.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-flow"}),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," Parcel",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),",")," parcelControl",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ParcelHookControl",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")))),Object(m.b)("h3",{id:"parcel"},"parcel"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-flow"}),"parcel",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," Parcel"))),Object(m.b)("p",null,"The first element of the returned array is the parcel that this hook holds in React state."),Object(m.b)("h3",{id:"parcelcontrol"},"parcelControl"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-flow"}),"parcelControl",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ParcelHookControl"))),Object(m.b)("p",null,"The second element of the returned array is an object containing data and functions for controlling the hook."),Object(m.b)("h2",{id:"parcelhookcontrol"},"ParcelHookControl"),Object(m.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(m.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(m.b)("code",b()({parentName:"pre"},{className:"language-flow"}),Object(m.b)("span",b()({parentName:"code"},{className:"token keyword"}),"type")," ParcelHookControl ",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    valueStatus",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," Object",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    changeStatus",Object(m.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," Object\n",Object(m.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}")))),Object(m.b)("ul",null,Object(m.b)("li",{parentName:"ul"},Object(m.b)("a",{id:"valueStatus"}),Object(m.b)(d.a,{name:"valueStatus",type:"Object",optional:!0,mdxType:"Param"}),"This object will exist if `value` is passed an `asyncValue` function. It's an object containing information about the current state of the execution of the async `value` function. This is useful if you want to conditionally render elements based on the state of the promise.",Object(m.b)("ul",{parentName:"li"},Object(m.b)("li",{parentName:"ul"},Object(m.b)(d.a,{name:"status",type:"string",mdxType:"Param"}),"Status is always one of three possible string values:",Object(m.b)("ul",{parentName:"li"},Object(m.b)("li",{parentName:"ul"},Object(m.b)("inlineCode",{parentName:"li"},'"pending"')," - if ",Object(m.b)("inlineCode",{parentName:"li"},"asyncValue"),"s promise is pending."),Object(m.b)("li",{parentName:"ul"},Object(m.b)("inlineCode",{parentName:"li"},'"resolved"')," - if the last promise returned from ",Object(m.b)("inlineCode",{parentName:"li"},"asyncValue")," was resolved."),Object(m.b)("li",{parentName:"ul"},Object(m.b)("inlineCode",{parentName:"li"},'"rejected"')," - if the last promise returned from ",Object(m.b)("inlineCode",{parentName:"li"},"asyncValue")," was rejected."))),Object(m.b)("li",{parentName:"ul"},Object(m.b)(d.a,{name:"isPending",type:"boolean",mdxType:"Param"}),"The `isPending` boolean is true if `asyncValue`s promise is pending, otherwise it is false."),Object(m.b)("li",{parentName:"ul"},Object(m.b)(d.a,{name:"isResolved",type:"boolean",mdxType:"Param"}),"The `isResolved` boolean is true if the last promise returned from `asyncValue` was resolved."),Object(m.b)("li",{parentName:"ul"},Object(m.b)(d.a,{name:"isRejected",type:"boolean",mdxType:"Param"}),"The `isRejected` boolean is true if the last promise returned from `asyncValue` was rejected."),Object(m.b)("li",{parentName:"ul"},Object(m.b)(d.a,{name:"error",type:"any",mdxType:"Param"}),"If the last promise returned from `asyncValue` was rejected, this contains the rejected promise's payload."))),Object(m.b)("li",{parentName:"ul"},Object(m.b)("a",{id:"changeStatus"}),Object(m.b)(d.a,{name:"changeStatus",type:"Object",optional:!0,mdxType:"Param"}),"This object will exist if `onChange` is passed an `asyncChange` function. It's an object containing information about the current state of the execution of the async `onChange` function. This is useful if you want to conditionally render elements based on the state of the promise.",Object(m.b)("ul",{parentName:"li"},Object(m.b)("li",{parentName:"ul"},Object(m.b)(d.a,{name:"status",type:"string",mdxType:"Param"}),"Status is always one of four possible string values:",Object(m.b)("ul",{parentName:"li"},Object(m.b)("li",{parentName:"ul"},Object(m.b)("inlineCode",{parentName:"li"},'"idle"')," - no promises have yet been returned from ",Object(m.b)("inlineCode",{parentName:"li"},"asyncChange")),Object(m.b)("li",{parentName:"ul"},Object(m.b)("inlineCode",{parentName:"li"},'"pending"')," - if ",Object(m.b)("inlineCode",{parentName:"li"},"asyncChange"),"s promise is pending."),Object(m.b)("li",{parentName:"ul"},Object(m.b)("inlineCode",{parentName:"li"},'"resolved"')," - if the last promise returned from ",Object(m.b)("inlineCode",{parentName:"li"},"asyncChange")," was resolved."),Object(m.b)("li",{parentName:"ul"},Object(m.b)("inlineCode",{parentName:"li"},'"rejected"')," - if the last promise returned from ",Object(m.b)("inlineCode",{parentName:"li"},"asyncChange")," was rejected."))),Object(m.b)("li",{parentName:"ul"},Object(m.b)(d.a,{name:"isPending",type:"boolean",mdxType:"Param"}),"The `isPending` boolean is true if `asyncChange`s promise is pending, otherwise it is false."),Object(m.b)("li",{parentName:"ul"},Object(m.b)(d.a,{name:"isResolved",type:"boolean",mdxType:"Param"}),"The `isResolved` boolean is true if the last promise returned from `asyncChange` was resolved."),Object(m.b)("li",{parentName:"ul"},Object(m.b)(d.a,{name:"isRejected",type:"boolean",mdxType:"Param"}),"The `isRejected` boolean is true if the last promise returned from `asyncChange` was rejected."),Object(m.b)("li",{parentName:"ul"},Object(m.b)(d.a,{name:"error",type:"any",mdxType:"Param"}),"If the last promise returned from `asyncChange` was rejected, this contains the rejected promise's payload.")))))}f.isMDXComponent=!0;var y=t(369);a.default=function(){return c.a.createElement(s.a,null,c.a.createElement(o.b,{pageTop:!0,pageBottom:!0,mdxHeading:!0,nav:y.a,pageNav:["# useParcelState","# Params","value","updateValue","rebase","onChange","onChangeUseResult","beforeChange","# Returns","parcel","parcelControl","# ParcelHookControl","valueStatus","changeStatus"]},c.a.createElement(f,null)))}},384:function(e,a,t){"use strict";var n=t(94),c=t.n(n),s=t(95);function o(){var e=c()(["\n    background-color: ",";\n    padding: 1rem;\n    margin-bottom: 1rem;\n    font-size: ",";\n"]);return o=function(){return e},e}a.a=s.b.div(o(),(function(e){return e.theme.colors.bgAlt}),(function(e){return e.theme.fontSizes.s}))},385:function(e,a,t){"use strict";t.d(a,"a",(function(){return l}));var n=t(12),c=t.n(n),s=t(93),o=t.n(s),p=(t(0),t(78)),b={_frontmatter:{}},r="wrapper";function l(e){var a=e.components,t=o()(e,["components"]);return Object(p.b)(r,c()({},b,t,{components:a,mdxType:"MDXLayout"}),Object(p.b)("h3",{id:"please-be-careful"},"Please be careful"),Object(p.b)("p",null,"This method is safe to use in most simple cases, but in some cases it should not be used:"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},"If the updater gives you a primitive value or childless value, you can return anything."),Object(p.b)("li",{parentName:"ul"},"If the updater gives you a value that has children, you can always return a primitive value or childless value."),Object(p.b)("li",{parentName:"ul"},"If the updater gives you a value that has children, you can return a value with children ",Object(p.b)("strong",{parentName:"li"},"only if the shape hasn't changed"),".")),Object(p.b)("p",null,"To find out why, and what to do about it, please read about ",Object(p.b)("a",c()({parentName:"p"},{href:"/parcel-updaters"}),"parcel updaters"),"."))}l.isMDXComponent=!0},388:function(e,a,t){e.exports=t.p+"static/parcelhoc-baedb7ff26ea00e762a8b5a4b1254630.gif"}}]);
//# sourceMappingURL=component---src-pages-api-use-parcel-state-jsx-74a63aaf212a2a60745e.js.map