(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{380:function(e,a,t){"use strict";t.r(a);var n=t(0),c=t.n(n),s=t(368),o=t(367),p=t(12),b=t.n(p),r=t(93),m=t.n(r),l=t(78),u=t(120),N=t(370),i=t(371),d=t(388),j=t.n(d),O=t(385),k={_frontmatter:{}},h="wrapper";function g(e){var a=e.components,t=m()(e,["components"]);return Object(l.b)(h,b()({},k,t,{components:a,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"useparcelform"},"useParcelForm"),Object(l.b)(N.a,{src:j.a,mdxType:"ApiPageIcon"}),Object(l.b)("p",null,"The useParcelForm function is a React hook. Its job is to make submittable forms easy to build. It provides a parcel stored in state and an internal buffer to store unsaved changes, and also handles how the parcel responds to changes in React props."),Object(l.b)("p",null,"This is perfect for creating user interfaces that allow the user to edit data and send changes back to the server."),Object(l.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"import")," useParcelForm ",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"from")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token string"}),"'react-dataparcels/useParcelForm'"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";")))),Object(l.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-flow"}),Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelForm"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"any"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// optional"),"\n    updateValue",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"boolean"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    rebase",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"boolean"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    onSubmit",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"Function"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    onSubmitUseResult",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"boolean"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    buffer",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"boolean"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    debounce",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"number"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    validation",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"Function"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    beforeChange",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"Function"),Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"|"),Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"Function"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";")))),Object(l.b)("p",null,'The explanations on this page sometimes refer to an "outerParcel" and an "innerParcel". This is because the useParcelForm hook actually holds two Parcels in state:'),Object(l.b)("h4",{id:"outerparcel"},"outerParcel"),Object(l.b)("p",null,"The original data provided via ",Object(l.b)("inlineCode",{parentName:"p"},"value"),". This parcel updates less frequently than innerParcel, only updating when the form is submitted, or if it is instructed to receive a new value via props or via the ",Object(l.b)("inlineCode",{parentName:"p"},"onSubmit")," function."),Object(l.b)("h4",{id:"innerparcel"},"innerParcel"),Object(l.b)("p",null,"A parcel that sits downstream of outerParcel, acting as a buffer to hold on to unsaved changes. It updates each time the user changes the form, or as a result of outerParcel updating."),Object(l.b)("p",null,"If you're interested you can ",Object(l.b)("a",b()({parentName:"p"},{href:"#Inside-the-hook"}),"read more about what's inside the hook"),"."),Object(l.b)("h2",{id:"params"},Object(l.b)(u.d,{textStyle:"weak",mdxType:"Text"},"Params")),Object(l.b)("h3",{id:"value"},"value"),Object(l.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-flow"}),"value",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"any")))),Object(l.b)("p",null,"Sets the initial value to be put into useParcelForm's Parcel."),Object(l.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelForm"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token number"}),"100"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// parcel.value is 100"),"\n\nparcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"."),Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"set"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token number"}),"200"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// set() triggers a change and a re-render"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// parcel.value is now 200")))),Object(l.b)("p",null,"If computing ",Object(l.b)("inlineCode",{parentName:"p"},"value")," is a heavy operation, you can return the value from a function. The function will only be called on initial mount, and is passed the previous value. However, if ",Object(l.b)("inlineCode",{parentName:"p"},"updateValue")," is set to true then the function will be called on every update."),Object(l.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," newValue ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token number"}),"100"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelForm"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token function-variable function"}),"value"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token parameter"}),"prevValue"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," newValue\n",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// parcel.value is 100")))),Object(l.b)("p",null,"Value can also accept ",Object(l.b)("a",b()({parentName:"p"},{href:"/dataparcels/parcel-updaters"}),"parcel updaters"),". These pass the previous data held in state, and expect the new data to be returned. These can be useful for setting ",Object(l.b)("a",b()({parentName:"p"},{href:"/dataparcels/parcel-meta"}),"parcel meta"),"."),Object(l.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"import")," asNode ",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"from")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token string"}),"'react-dataparcels/asNode'"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelForm"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"asNode"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token parameter"}),"node")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," node\n        ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"."),Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"update"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," newValue",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),"\n        ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"."),Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"setMeta"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n            foo",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token boolean"}),"true"),"\n        ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";")))),Object(l.b)("h4",{id:"returning-promises-from-value"},"Returning promises from value"),Object(l.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"import")," asyncValue ",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"from")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token string"}),"'react-dataparcels/asyncValue'"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelForm"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"asyncValue"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"async")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n        ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// add logic here"),"\n        ",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"return")," theValue",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";")))),Object(l.b)("p",null,"It's possible to return a value from a promise using the ",Object(l.b)("inlineCode",{parentName:"p"},"asyncValue")," function. The ",Object(l.b)("inlineCode",{parentName:"p"},"useParcelForm")," hook's parcel has a value of ",Object(l.b)("inlineCode",{parentName:"p"},"undefined")," until the promise resolves. Once it has resolved, ",Object(l.b)("inlineCode",{parentName:"p"},"useParcelForm")," hook's parcel has a value of the result of the async function."),Object(l.b)("p",null,"When using ",Object(l.b)("inlineCode",{parentName:"p"},"asyncValue")," you will also receive its status via ",Object(l.b)("a",b()({parentName:"p"},{href:"#valueStatus"}),"valueStatus"),"."),Object(l.b)("h3",{id:"updatevalue"},"updateValue"),Object(l.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-flow"}),"updateValue",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"boolean")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token boolean"}),"false")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// optional")))),Object(l.b)("p",null,"When ",Object(l.b)("inlineCode",{parentName:"p"},"updateValue")," is set to true during an update, the useParcelForm hook will check to see if ",Object(l.b)("inlineCode",{parentName:"p"},"value")," has changed, and will update its Parcel's value if so. This will completely replace any changes that may have happened to the Parcel since the last time ",Object(l.b)("inlineCode",{parentName:"p"},"value")," was put into the Parcel."),Object(l.b)("p",null,"Note that it will also cause any downstream ",Object(l.b)("a",b()({parentName:"p"},{href:"/dataparcels/api/useParcelBuffer#parcel"}),"useParcelBuffer")," hooks and ",Object(l.b)("a",b()({parentName:"p"},{href:"/dataparcels/api/ParcelBoundary#parcel"}),"ParcelBoundaries")," to forget all their buffered changes, unless ",Object(l.b)("a",b()({parentName:"p"},{href:"#rebase"}),"rebase")," is used."),Object(l.b)("p",null,"Value changes are detected using ",Object(l.b)("inlineCode",{parentName:"p"},"Object.is()"),", comparing the new ",Object(l.b)("inlineCode",{parentName:"p"},"value")," with the previous one."),Object(l.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// receivedValue is 100"),"\n\n",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelForm"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," receivedValue",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    updateValue",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token boolean"}),"true"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// parcel.value is 100"),"\n\nparcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"."),Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"set"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token number"}),"200"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// set() triggers a change and a re-render"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// parcel.value is now 200"),"\n\n",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// if component updates and receivedValue is now 300"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// then parcel.value is now 300")))),Object(l.b)("h3",{id:"rebase"},"rebase"),Object(l.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-flow"}),"rebase",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"boolean")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token boolean"}),"false")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// optional")))),Object(l.b)("p",null,"As described above, updates caused by ",Object(l.b)("inlineCode",{parentName:"p"},"updateValue")," (or ",Object(l.b)("inlineCode",{parentName:"p"},"onSubmitUseResult"),") will cause any downstream ",Object(l.b)("a",b()({parentName:"p"},{href:"/dataparcels/api/useParcelBuffer#parcel"}),"useParcelBuffer")," hooks and ",Object(l.b)("a",b()({parentName:"p"},{href:"/dataparcels/api/ParcelBoundary#parcel"}),"ParcelBoundaries")," to forget all their buffered changes. This is safe default behaviour because changes in the downstream buffers may not be compatible with the new Parcel's data shape. However it may be user unfriendly in some cases, depending on when and how often the parcel updates."),Object(l.b)("p",null,"Setting ",Object(l.b)("inlineCode",{parentName:"p"},"rebase")," to true will prevent downstream buffers from being cleared. This can allow the user to continue editing data seamlessly while new changes are received."),Object(l.b)("h4",{id:"please-note"},"Please note"),Object(l.b)("p",null,"Only use this if the shape of your data does not change, so that downstream buffered changes are compatible with the new Parcel's data shape."),Object(l.b)("p",null,"This restriction will be lifted in future with the introduction of a feature known as ",Object(l.b)("em",{parentName:"p"},"rekey"),"."),Object(l.b)("h3",{id:"onsubmit"},"onSubmit"),Object(l.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-flow"}),"onSubmit",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),"parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," Parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),",")," changeRequest",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ChangeRequest",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"any"),Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"|"),"Promise",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"<"),Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"any"),Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),">")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// optional")))),Object(l.b)("p",null,"If provided, this function is called on submit. It receives the new ",Object(l.b)("a",b()({parentName:"p"},{href:"/dataparcels/api/Parcel"}),"Parcel"),", and the ",Object(l.b)("a",b()({parentName:"p"},{href:"/dataparcels/api/ChangeRequest"}),"ChangeRequest")," that was responsible for the change. This function can be used to relay changes further up the React heirarchy."),Object(l.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelForm"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," receivedValue",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token function-variable function"}),"onSubmit"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token parameter"}),"parcel",Object(l.b)("span",b()({parentName:"span"},{className:"token punctuation"}),",")," changeRequest"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n        ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// add logic here"),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";")))),Object(l.b)("h4",{id:"returning-promises-from-onsubmit"},"Returning promises from onSubmit"),Object(l.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelForm"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token function-variable function"}),"onSubmit"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"async")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token parameter"}),"parcel",Object(l.b)("span",b()({parentName:"span"},{className:"token punctuation"}),",")," changeRequest"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n        ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// add logic here"),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";")))),Object(l.b)("p",null,"It's possible to return a promise from ",Object(l.b)("inlineCode",{parentName:"p"},"onSubmit"),". When doing this, the change does not enter the hook's state until the promise resolves."),Object(l.b)("p",null,"If another change arrives while a promise is still pending, it will be passed through ",Object(l.b)("inlineCode",{parentName:"p"},"onSubmit")," after the first promise is resolved or rejected. This is to ensure that there is only one operation happening at a time. If the first ChangeRequest's\npromise is rejected, the changes will be merged with the next ChangeRequest when ",Object(l.b)("inlineCode",{parentName:"p"},"onSubmit")," is called the second time."),Object(l.b)("p",null,"This is discussed in more detail in ",Object(l.b)("a",b()({parentName:"p"},{href:"/dataparcels/data-synchronisation"}),"data synchronisation"),"."),Object(l.b)("h3",{id:"onsubmituseresult"},"onSubmitUseResult"),Object(l.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-flow"}),"onSubmitUseResult",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"boolean")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token boolean"}),"false")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// optional")))),Object(l.b)("p",null,"When true, this sets the value of the outerParcel to the return value of ",Object(l.b)("inlineCode",{parentName:"p"},"onSubmit"),". If ",Object(l.b)("inlineCode",{parentName:"p"},"onSubmit")," returns a promise, the resolved value of the promise will be used."),Object(l.b)("p",null,"Using ",Object(l.b)("inlineCode",{parentName:"p"},"onSubmitUseResult")," can be useful for receiving data back from a request to write data to a server, as it ensures that outerParcel's value is as up-to-date as possible. This is discussed in more detail in ",Object(l.b)("a",b()({parentName:"p"},{href:"/dataparcels/data-synchronisation#Receiving-data-from-the-server-after-saving"}),"data synchronisation"),"."),Object(l.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelForm"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," receivedValue",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token function-variable function"}),"onSubmit"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token parameter"}),"parcel",Object(l.b)("span",b()({parentName:"span"},{className:"token punctuation"}),",")," changeRequest"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n        ",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"return")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"saveMyData"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),"parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"."),"value",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n        ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// ^ saveMyData send a request to a server to save the data,"),"\n        ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// and returns a promise containing the updated data from the server"),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    onSubmitUseResult",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token boolean"}),"true"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";")))),Object(l.b)("p",null,"Note that it will also cause any downstream ",Object(l.b)("a",b()({parentName:"p"},{href:"/dataparcels/api/useParcelBuffer#parcel"}),"useParcelBuffer")," hooks and ",Object(l.b)("a",b()({parentName:"p"},{href:"/dataparcels/api/ParcelBoundary#parcel"}),"ParcelBoundaries")," to forget all their buffered changes, unless ",Object(l.b)("a",b()({parentName:"p"},{href:"#rebase"}),"rebase")," is used."),Object(l.b)("h3",{id:"buffer"},"buffer"),Object(l.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-flow"}),"buffer",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"boolean")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token boolean"}),"true")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// optional")))),Object(l.b)("p",null,"When ",Object(l.b)("inlineCode",{parentName:"p"},"buffer")," is true, changes that occur to ",Object(l.b)("inlineCode",{parentName:"p"},"parcel")," will be caught in useParcelForm's buffer, until released explicitly by calling ",Object(l.b)("a",b()({parentName:"p"},{href:"#submit"}),"parcelControl.submit()"),", or automatically if ",Object(l.b)("a",b()({parentName:"p"},{href:"#debounce"}),"debounce")," is being used."),Object(l.b)("p",null,"When ",Object(l.b)("inlineCode",{parentName:"p"},"buffer")," is false, changes will propagate up to useParcelForm's outerParcel immediately."),Object(l.b)("h3",{id:"debounce"},"debounce"),Object(l.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-flow"}),"debounce",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"number")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// optional")))),Object(l.b)("p",null,"If set, ",Object(l.b)("inlineCode",{parentName:"p"},"debounce")," will debounce any changes that enter the buffer. The number indicates the number of milliseconds to debounce."),Object(l.b)("p",null,"This can be used to make ",Object(l.b)("a",b()({parentName:"p"},{href:"/dataparcels/ui-behaviour#Autosaving-forms"}),"autosaving forms"),"."),Object(l.b)("h4",{id:"debouncing-explained"},"Debouncing explained"),Object(l.b)("p",null,"When the ",Object(l.b)("inlineCode",{parentName:"p"},"parcel")," sends a change, the useParelForm hook will catch it and prevent it from being propagated up to useParcelForm's outerParcel."),Object(l.b)("p",null,"The useParcelForm hooks waits until no new changes have occured for ",Object(l.b)("inlineCode",{parentName:"p"},"debounce")," number of milliseconds. It then releases all the changes it has buffered, all together in a single change request."),Object(l.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelForm"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," receivedValue",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token function-variable function"}),"onSubmit"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token parameter"}),"parcel",Object(l.b)("span",b()({parentName:"span"},{className:"token punctuation"}),",")," changeRequest"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n        ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// add logic here"),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    debounce",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token number"}),"500"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";")))),Object(l.b)("h3",{id:"validation"},"validation"),Object(l.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-flow"}),"validation",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ParcelValidationFunction ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// optional")))),Object(l.b)("p",null,"Applies ",Object(l.b)("a",b()({parentName:"p"},{href:"/dataparcels/api/validation"}),"validation")," to the form. ",Object(l.b)("a",b()({parentName:"p"},{href:"/dataparcels/ui-behaviour#Validation-on-user-input"}),"See an example here"),"."),Object(l.b)("p",null,"If the validation config doesn't need to change after initial mount, it can be returned from a function. The function will only be called on initial mount and the validation will be cached from then on."),Object(l.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"import")," validation ",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"from")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token string"}),"'dataparcels/validation'"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"import")," validation ",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"from")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token string"}),"'react-dataparcels/validation'"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelForm"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n        name",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token string"}),"'unknown'"),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token function-variable function"}),"validation"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"validation"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n        ",Object(l.b)("span",b()({parentName:"code"},{className:"token string"}),"'name'"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token parameter"}),"value")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," value ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"null")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token template-string"}),Object(l.b)("span",b()({parentName:"span"},{className:"token template-punctuation string"}),"`"),Object(l.b)("span",b()({parentName:"span"},{className:"token string"}),"Name must not be blank"),Object(l.b)("span",b()({parentName:"span"},{className:"token template-punctuation string"}),"`")),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// or"),"\n\n",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelForm"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n        name",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token string"}),"'unknown'"),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    validation",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"validation"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n        ",Object(l.b)("span",b()({parentName:"code"},{className:"token string"}),"'name'"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token parameter"}),"value")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," value ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"null")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token template-string"}),Object(l.b)("span",b()({parentName:"span"},{className:"token template-punctuation string"}),"`"),Object(l.b)("span",b()({parentName:"span"},{className:"token string"}),"Name must not be blank"),Object(l.b)("span",b()({parentName:"span"},{className:"token template-punctuation string"}),"`")),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";")))),Object(l.b)("h3",{id:"beforechange"},"beforeChange"),Object(l.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-flow"}),"beforeChange",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ParcelUpdater",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"|"),"ParcelUpdater",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// optional"),"\n\n",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"type")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function-variable function"}),"ParcelUpdater")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),"value",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"any"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),",")," changeRequest",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ChangeRequest",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"any"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"type")," ParcelUpdater ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"asNode"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),"node",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ParcelNode",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),",")," changeRequest",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ChangeRequest",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," ParcelNode",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"type")," ParcelUpdater ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"asChildNodes"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),"nodes",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"any"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),",")," changeRequest",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ChangeRequest",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"any"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";")))),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"beforeChange")," parameter accepts either a single function, or an array of functions. Whenever a new ",Object(l.b)("inlineCode",{parentName:"p"},"value")," is taken into useParcelForm from params, and whenever the useParcelForm hook recieves a change from below, the change is passed through each ",Object(l.b)("inlineCode",{parentName:"p"},"beforeChange")," function."),Object(l.b)("p",null,"Internally the useParcelBuffer hook uses ",Object(l.b)("a",b()({parentName:"p"},{href:"/dataparcels/api/Parcel#modifyUp()"}),"Parcel.modifyUp()")," on each of the ",Object(l.b)("inlineCode",{parentName:"p"},"beforeChange")," functions. If more than one function is passed to ",Object(l.b)("inlineCode",{parentName:"p"},"beforeChange"),", the change will go through the first function in the array first, then the second etc."),Object(l.b)("p",null,"This is particularly useful for setting ",Object(l.b)("a",b()({parentName:"p"},{href:"data-editing#Deriving-meta"}),"derived data"),", and plugins such as ",Object(l.b)("a",b()({parentName:"p"},{href:"/dataparcels/api/validation"}),"validation")," are built to be passed into ",Object(l.b)("inlineCode",{parentName:"p"},"beforeChange"),"."),Object(l.b)(O.a,{mdxType:"ValueUpdater"}),Object(l.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-js"}),Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelForm"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    value",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token string"}),'"ABC"'),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token function-variable function"}),"beforeChange"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token parameter"}),"value")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," value",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"."),Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"toLowerCase"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),'// ^ "ABC" will be passed through `beforeChange`'),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),'// and useParcelForm\'s Parcel will contain a value of "abc"'),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),'// parcel.value is now "abc"'),"\n\nparcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"."),Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"set"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token string"}),'"HELLO"'),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),'// ^ "HELLO" will be passed through `beforeChange`'),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),'// and useParcelForm\'s Parcel will contain a value of "hello"'),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),'// parcel.value is now "hello"')))),Object(l.b)("h2",{id:"returns"},Object(l.b)(u.d,{textStyle:"weak",mdxType:"Text"},"Returns")),Object(l.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-flow"}),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," Parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),",")," parcelControl",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ParcelHookControl",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")))),Object(l.b)("h3",{id:"parcel"},"parcel"),Object(l.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-flow"}),"parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," Parcel"))),Object(l.b)("p",null,"The first element of the returned array is the parcel previously referred to as innerParcel. It's a Parcel that contains the current state of outerParcel, with all the changes in the buffer applied to it. When buffering is enabled, any changes that ",Object(l.b)("inlineCode",{parentName:"p"},"parcel")," receives will go into the buffer."),Object(l.b)("h3",{id:"parcelcontrol"},"parcelControl"),Object(l.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-flow"}),"parcelControl",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ParcelHookControl"))),Object(l.b)("p",null,"The second element of the returned array is an object containing data and functions for controlling the hook."),Object(l.b)("h2",{id:"parcelhookcontrol"},"ParcelHookControl"),Object(l.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-flow"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-flow"}),Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"type")," ParcelHookControl ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n    submit",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"Function"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    reset",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"Function"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    buffered",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token type tag"}),"boolean"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    actions",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," Action",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    valueStatus",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," Object",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n    submitStatus",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"?"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," Object\n",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}")))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{id:"submit"}),Object(l.b)(i.a,{name:"submit",type:"() => void",mdxType:"Param"}),"When called, this function will release all changes in the buffer."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{id:"reset"}),Object(l.b)(i.a,{name:"reset",type:"() => void",mdxType:"Param"}),"When called, this function will remove all changes in the buffer, and reset the data in `parcel` to be the same as the top Parcel stored in useParcelForm's state."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{id:"buffered"}),Object(l.b)(i.a,{name:"buffered",type:"boolean",mdxType:"Param"}),"This boolean is true when there are any changes in the buffer, or false if the buffer is empty."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{id:"actions"}),Object(l.b)(i.a,{name:"actions",type:"Action[]",mdxType:"Param"}),"An array of actions that are currently in the buffer."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{id:"valueStatus"}),Object(l.b)(i.a,{name:"valueStatus",type:"Object",optional:!0,mdxType:"Param"}),"This object will exist if `value` is passed an `asyncValue` function. It's an object containing information about the current state of the execution of the async `value` function. This is useful if you want to conditionally render elements based on the state of the promise.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)(i.a,{name:"status",type:"string",mdxType:"Param"}),Object(l.b)("p",{parentName:"li"},"Status is always one of three possible string values:"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'"pending"')," - if ",Object(l.b)("inlineCode",{parentName:"li"},"asyncValue"),"s promise is pending."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'"resolved"')," - if the last promise returned from ",Object(l.b)("inlineCode",{parentName:"li"},"asyncValue")," was resolved."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'"rejected"')," - if the last promise returned from ",Object(l.b)("inlineCode",{parentName:"li"},"asyncValue")," was rejected."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)(i.a,{name:"isPending",type:"boolean",mdxType:"Param"}),Object(l.b)("p",{parentName:"li"},"The ",Object(l.b)("inlineCode",{parentName:"p"},"isPending")," boolean is true if ",Object(l.b)("inlineCode",{parentName:"p"},"asyncValue"),"s promise is pending, otherwise it is false.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)(i.a,{name:"isResolved",type:"boolean",mdxType:"Param"}),Object(l.b)("p",{parentName:"li"},"The ",Object(l.b)("inlineCode",{parentName:"p"},"isResolved")," boolean is true if the last promise returned from ",Object(l.b)("inlineCode",{parentName:"p"},"asyncValue")," was resolved.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)(i.a,{name:"isRejected",type:"boolean",mdxType:"Param"}),Object(l.b)("p",{parentName:"li"},"The ",Object(l.b)("inlineCode",{parentName:"p"},"isRejected")," boolean is true if the last promise returned from ",Object(l.b)("inlineCode",{parentName:"p"},"asyncValue")," was rejected.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)(i.a,{name:"error",type:"any",mdxType:"Param"}),Object(l.b)("p",{parentName:"li"},"If the last promise returned from ",Object(l.b)("inlineCode",{parentName:"p"},"asyncValue")," was rejected, this contains the rejected promise's payload.")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("a",{id:"submitStatus"}),Object(l.b)(i.a,{name:"submitStatus",type:"Object",optional:!0,mdxType:"Param"}),"This is an object containing information about the current state of the async `onSubmit` function. This is useful if you want to conditionally render elements based on the state of the promise.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)(i.a,{name:"status",type:"string",mdxType:"Param"}),Object(l.b)("p",{parentName:"li"},"Status is always one of four possible string values:"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'"idle"')," - no promises have yet been returned from ",Object(l.b)("inlineCode",{parentName:"li"},"onSubmit")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'"pending"')," - if ",Object(l.b)("inlineCode",{parentName:"li"},"onSubmit"),"s promise is pending."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'"resolved"')," - if the last promise returned from ",Object(l.b)("inlineCode",{parentName:"li"},"onSubmit")," was resolved."),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},'"rejected"')," - if the last promise returned from ",Object(l.b)("inlineCode",{parentName:"li"},"onSubmit")," was rejected."))),Object(l.b)("li",{parentName:"ul"},Object(l.b)(i.a,{name:"isPending",type:"boolean",mdxType:"Param"}),Object(l.b)("p",{parentName:"li"},"The ",Object(l.b)("inlineCode",{parentName:"p"},"isPending")," boolean is true if ",Object(l.b)("inlineCode",{parentName:"p"},"onSubmit"),"s promise is pending, otherwise it is false.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)(i.a,{name:"isResolved",type:"boolean",mdxType:"Param"}),Object(l.b)("p",{parentName:"li"},"The ",Object(l.b)("inlineCode",{parentName:"p"},"isResolved")," boolean is true if the last promise returned from ",Object(l.b)("inlineCode",{parentName:"p"},"onSubmit")," was resolved.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)(i.a,{name:"isRejected",type:"boolean",mdxType:"Param"}),Object(l.b)("p",{parentName:"li"},"The ",Object(l.b)("inlineCode",{parentName:"p"},"isRejected")," boolean is true if the last promise returned from ",Object(l.b)("inlineCode",{parentName:"p"},"onSubmit")," was rejected.")),Object(l.b)("li",{parentName:"ul"},Object(l.b)(i.a,{name:"error",type:"any",mdxType:"Param"}),Object(l.b)("p",{parentName:"li"},"If the last promise returned from ",Object(l.b)("inlineCode",{parentName:"p"},"onSubmit")," was rejected, this contains the rejected promise's payload."))))),Object(l.b)("h2",{id:"inside-the-hook"},"Inside the hook"),Object(l.b)("p",null,"The useParcelForm hook is a combination of ",Object(l.b)("a",b()({parentName:"p"},{href:"/dataparcels/api/useParcelState"}),"useParcelState")," and ",Object(l.b)("a",b()({parentName:"p"},{href:"/dataparcels/api/useParcelBuffer"}),"useParcelBuffer"),"."),Object(l.b)("p",null,"Internally, the hook looks roughly like this:"),Object(l.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(l.b)("pre",b()({parentName:"div"},{className:"language-js"}),Object(l.b)("code",b()({parentName:"pre"},{className:"language-js"}),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token function-variable function"}),"useParcelForm")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token parameter"}),"hookConfig"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=>")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// 1. Parcel State"),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"//"),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// holds the original data"),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// and sends changed data to a callback"),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"outerParcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelState"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n        value",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n        updateValue",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n        onSubmit",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n        onSubmitUseResult\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// 2. Parcel Buffer"),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"//"),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// buffers the changes that the user has made"),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// and prevents those changes from being propagated"),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// back up to state until its ready to be saved"),"\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"innerParcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),",")," parcelControl",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelBuffer"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"{"),"\n        parcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),":")," outerParcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n        buffer",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n        debounce",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),","),"\n        beforeChange\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\n    ",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"return")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"innerParcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),",")," parcelControl",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"}"),"\n\n",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// 3. Outside of the useParcelForm hook"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// allow the user to make changes to the data"),"\n",Object(l.b)("span",b()({parentName:"code"},{className:"token keyword"}),"let")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"["),"innerParcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),",")," parcelControl",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"]")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"=")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"useParcelForm"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token operator"}),"..."),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";"),"\n\ninnerParcel",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"."),Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"get"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token string"}),"'...'"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(l.b)("span",b()({parentName:"code"},{className:"token comment"}),"// etc"),"\nparcelControl",Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"."),Object(l.b)("span",b()({parentName:"code"},{className:"token function"}),"submit"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),"("),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),")"),Object(l.b)("span",b()({parentName:"code"},{className:"token punctuation"}),";")))),Object(l.b)("p",null,'The "submit" button is really an action that instructs the useParcelBuffer hook to release all of its buffered changes up into the useParcelState hook.'))}g.isMDXComponent=!0;var f=t(369);a.default=function(){return c.a.createElement(s.a,null,c.a.createElement(o.b,{pageTop:!0,pageBottom:!0,mdxHeading:!0,nav:f.a,pageNav:["# useParcelForm","# Params","value","updateValue","rebase","onSubmit","onSubmitUseResult","buffer","debounce","validation","beforeChange","# Returns","parcel","parcelControl","# ParcelHookControl","submit","reset","buffered","actions","valueStatus","submitStatus","# Inside the hook"]},c.a.createElement(g,null)))}},385:function(e,a,t){"use strict";t.d(a,"a",(function(){return m}));var n=t(12),c=t.n(n),s=t(93),o=t.n(s),p=(t(0),t(78)),b={_frontmatter:{}},r="wrapper";function m(e){var a=e.components,t=o()(e,["components"]);return Object(p.b)(r,c()({},b,t,{components:a,mdxType:"MDXLayout"}),Object(p.b)("h3",{id:"please-be-careful"},"Please be careful"),Object(p.b)("p",null,"This method is safe to use in most simple cases, but in some cases it should not be used:"),Object(p.b)("ul",null,Object(p.b)("li",{parentName:"ul"},"If the updater gives you a primitive value or childless value, you can return anything."),Object(p.b)("li",{parentName:"ul"},"If the updater gives you a value that has children, you can always return a primitive value or childless value."),Object(p.b)("li",{parentName:"ul"},"If the updater gives you a value that has children, you can return a value with children ",Object(p.b)("strong",{parentName:"li"},"only if the shape hasn't changed"),".")),Object(p.b)("p",null,"To find out why, and what to do about it, please read about ",Object(p.b)("a",c()({parentName:"p"},{href:"/dataparcels/parcel-updaters"}),"parcel updaters"),"."))}m.isMDXComponent=!0},388:function(e,a,t){e.exports=t.p+"static/parcelhoc-baedb7ff26ea00e762a8b5a4b1254630.gif"}}]);
//# sourceMappingURL=component---src-pages-api-use-parcel-form-jsx-339ef695b73b0b45bf39.js.map