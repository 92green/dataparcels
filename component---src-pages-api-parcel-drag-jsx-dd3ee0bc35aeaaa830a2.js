(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{378:function(e,a,t){"use strict";t.r(a);var n=t(0),r=t.n(n),c=t(369),l=t(368),o=t(9),p=t.n(o),s=t(69),b=t.n(s),i=t(79),d=t(395),m=t.n(d),u=t(388),g=t(367),N={_frontmatter:{}},h="wrapper";function j(e){var a=e.components,t=b()(e,["components"]);return Object(i.b)(h,p()({},N,t,{components:a,mdxType:"MDXLayout"}),Object(i.b)("h1",{id:"parceldrag"},"ParcelDrag"),Object(i.b)("div",{className:"gatsby-highlight","data-language":"js"},Object(i.b)("pre",p()({parentName:"div"},{className:"language-js"}),Object(i.b)("code",p()({parentName:"pre"},{className:"language-js"}),Object(i.b)("span",p()({parentName:"code"},{className:"token keyword"}),"import")," ParcelDrag ",Object(i.b)("span",p()({parentName:"code"},{className:"token keyword"}),"from")," ",Object(i.b)("span",p()({parentName:"code"},{className:"token string"}),"'react-dataparcels-drag'"),Object(i.b)("span",p()({parentName:"code"},{className:"token punctuation"}),";")))),Object(i.b)("p",null,"Dataparcels' drag plugin provides an easy way to add drag and drop sorting to arrays of items. It uses ",Object(i.b)("a",p()({parentName:"p"},{href:"https://github.com/clauderic/react-sortable-hoc",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"react-sortable-hoc",Object(i.b)("span",{parentName:"a"},""))," to perform the dragging and sorting, and all of ",Object(i.b)("inlineCode",{parentName:"p"},"react-sortable-hoc"),"s API is accessible to use via ParcelDrag."),Object(i.b)("h3",{id:"example-usage"},"Example usage"),Object(i.b)("p",null,"Please refer to the UI Behaviour page to see ",Object(i.b)("a",p()({parentName:"p"},{href:"/ui-behaviour/#Drag-and-drop-sorting"}),"a full example"),"."),Object(i.b)(g.c,{bounded:!0,mdxType:"Pre"},Object(i.b)(l.a,{language:"jsx",mdxType:"CodeHighlight"},m.a)),Object(i.b)("h2",{id:"children"},Object(i.b)(g.d,{textStyle:"weaker",mdxType:"Text"},"Children")),Object(i.b)("h3",{id:"childrenderer"},"childRenderer"),Object(i.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(i.b)("pre",p()({parentName:"div"},{className:"language-flow"}),Object(i.b)("code",p()({parentName:"pre"},{className:"language-flow"}),Object(i.b)("span",p()({parentName:"code"},{className:"token punctuation"}),"("),"parcel",Object(i.b)("span",p()({parentName:"code"},{className:"token punctuation"}),":")," Parcel",Object(i.b)("span",p()({parentName:"code"},{className:"token punctuation"}),")")," ",Object(i.b)("span",p()({parentName:"code"},{className:"token operator"}),"=>")," Node"))),Object(i.b)("p",null,"ParcelDrag must be given a ",Object(i.b)("inlineCode",{parentName:"p"},"childRenderer")," function as children. This is called when rendering each child element, passing the Parcel for each element."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)(u.a,{name:"parcel",type:"Parcel",mdxType:"Param"}),Object(i.b)("p",{parentName:"li"},"The Parcel for each element being rendered"))),Object(i.b)("h2",{id:"props"},Object(i.b)(g.d,{textStyle:"weaker",mdxType:"Text"},"Props")),Object(i.b)("h3",{id:"parcel"},"parcel"),Object(i.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(i.b)("pre",p()({parentName:"div"},{className:"language-flow"}),Object(i.b)("code",p()({parentName:"pre"},{className:"language-flow"}),"parcel",Object(i.b)("span",p()({parentName:"code"},{className:"token punctuation"}),":")," Parcel"))),Object(i.b)("p",null,"The Parcel that will be sortable. This Parcel must be of type ",Object(i.b)("a",p()({parentName:"p"},{href:"/parcel-types#IndexedParcel"}),"IndexedParcel"),", and an error will be thrown if it is not."),Object(i.b)("h3",{id:"container"},"container"),Object(i.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(i.b)("pre",p()({parentName:"div"},{className:"language-flow"}),Object(i.b)("code",p()({parentName:"pre"},{className:"language-flow"}),"container",Object(i.b)("span",p()({parentName:"code"},{className:"token punctuation"}),":")," ComponentType",Object(i.b)("span",p()({parentName:"code"},{className:"token operator"}),"<"),Object(i.b)("span",p()({parentName:"code"},{className:"token type tag"}),"any"),Object(i.b)("span",p()({parentName:"code"},{className:"token operator"}),">")," ",Object(i.b)("span",p()({parentName:"code"},{className:"token comment"}),"// optional, defaults to 'div'")))),Object(i.b)("p",null,"The container element to render around the children. Defaults to ",Object(i.b)("inlineCode",{parentName:"p"},"'div'"),"."),Object(i.b)("a",{id:"sortableElementProps"}),Object(i.b)("h3",{id:"sortableelementprops"},"...sortableElementProps"),Object(i.b)("div",{className:"gatsby-highlight","data-language":"flow"},Object(i.b)("pre",p()({parentName:"div"},{className:"language-flow"}),Object(i.b)("code",p()({parentName:"pre"},{className:"language-flow"}),Object(i.b)("span",p()({parentName:"code"},{className:"token operator"}),"..."),"sortableElementProps",Object(i.b)("span",p()({parentName:"code"},{className:"token punctuation"}),":")," ",Object(i.b)("span",p()({parentName:"code"},{className:"token type tag"}),"any")))),Object(i.b)("p",null,"Any additional props will be passed onto ",Object(i.b)("a",p()({parentName:"p"},{href:"https://github.com/clauderic/react-sortable-hoc#sortableelement-hoc",target:"_blank",rel:["nofollow","noopener","noreferrer"]}),"react-sortable-hoc's SortableContainer hoc",Object(i.b)("span",{parentName:"a"},"")),", to allow configuration of how the dragging behaves."),Object(i.b)("p",null,"Note that ",Object(i.b)("inlineCode",{parentName:"p"},"SortableContainer"),"'s ",Object(i.b)("inlineCode",{parentName:"p"},"onSortEnd")," prop is not required, as it's provided by ParcelDrag. If you pass an ",Object(i.b)("inlineCode",{parentName:"p"},"onSortEnd")," prop to ParcelDrag, it will fire immediately after the Parcel triggers its change request."))}j.isMDXComponent=!0;var O=t(370);a.default=function(){return r.a.createElement(c.a,null,r.a.createElement(l.b,{pageTop:!0,pageBottom:!0,mdxHeading:!0,nav:O.a,pageNav:["# ParcelDrag","# Children","childRenderer","# Props","parcel","container","...sortableElementProps"]},r.a.createElement(j,null)))}},388:function(e,a,t){"use strict";var n=t(0),r=t.n(n),c=t(367),l=t(150);a.a=function(e){var a=e.default,t=e.name,n=e.optional,o=e.type;return r.a.createElement(l.a,{mb:3},r.a.createElement(c.d,{textStyle:"h4"},t)," ",r.a.createElement(c.d,{textStyle:"codeType"},n?"?":"",": ",o," ",a?"= ".concat(a):""))}},395:function(e,a){e.exports='import React from \'react\';\nimport useParcelState from \'react-dataparcels/useParcelState\';\nimport ParcelBoundary from \'react-dataparcels/ParcelBoundary\';\nimport ParcelDrag from \'react-dataparcels-drag\';\n\nexport default function FruitListEditor(props) {\n\n    let [fruitListParcel] = useParcelState({\n        value: [\n            "Apple",\n            "Banana",\n            "Crumpets"\n        ]\n    });\n\n    return <div>\n        <ParcelDrag parcel={fruitListParcel}>\n            {(fruitParcel) => <ParcelBoundary parcel={fruitParcel}>\n                {(parcel) => <div>\n                    <input type="text" {...parcel.spreadDOM()} />\n                    <button onClick={() => parcel.insertAfter(`${parcel.value} copy`)}>+</button>\n                    <button onClick={() => parcel.delete()}>x</button>\n                </div>}\n            </ParcelBoundary>}\n        </ParcelDrag>\n        <button onClick={() => fruitListParcel.push("New fruit")}>Add new fruit</button>\n    </div>;\n}\n'}}]);
//# sourceMappingURL=component---src-pages-api-parcel-drag-jsx-dd3ee0bc35aeaaa830a2.js.map