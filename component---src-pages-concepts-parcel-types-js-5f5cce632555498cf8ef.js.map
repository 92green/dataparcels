{"version":3,"sources":["webpack:///./src/mdx/concepts/parcel-types.mdx","webpack:///./src/pages/concepts/parcel-types.js"],"names":["layoutProps","_frontmatter","MDXLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent","pageTop","pageBottom","mdxHeading","nav","pageNav"],"mappings":"iLAYMA,EAAc,CAClBC,aAR0B,IAUtBC,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,sBACD,OAAO,YAACH,EAAD,OAAeF,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,gBADR,gBAGA,qKAEA,qEAAoD,qBAAGC,WAAW,KAAQ,CACtE,KAAQ,6BADwC,gBAApD,KAGA,0NAAyM,qBAAGA,WAAW,KAAQ,CAC3N,KAAQ,kBAD6L,gBAAzM,KAGA,iBAAQ,CACN,GAAM,gBADR,gBAGA,sCAAqB,0BAAYA,WAAW,KAAvB,gBAArB,sHAAoM,qBAAGA,WAAW,KAAQ,CACtN,KAAQ,uCACR,OAAU,SACV,IAAO,CAAC,WAAY,WAAY,gBAHgK,YAIlL,oBAAMA,WAAW,KAAjB,KAJlB,wEAKA,sBACE,kBAAIA,WAAW,MAAf,WACA,kBAAIA,WAAW,MAAf,UACA,kBAAIA,WAAW,MAAf,qBACA,kBAAIA,WAAW,MAAf,sBACA,kBAAIA,WAAW,MAAf,yBAEF,qHACA,8DAA6C,0BAAYA,WAAW,KAAvB,gBAA7C,mHACA,iIAAgH,qBAAGA,WAAW,KAAQ,CAClI,KAAQ,6CACR,OAAU,SACV,IAAO,CAAC,WAAY,WAAY,gBAH4E,0BAIhF,oBAAMA,WAAW,KAAjB,KAJhC,KAKA,+EAA8D,qBAAGA,WAAW,KAAQ,CAChF,KAAQ,+BADkD,kBAA9D,QAEoC,qBAAGA,WAAW,KAAQ,CACtD,KAAQ,oBADwB,kBAFpC,KAKA,iBAAQ,CACN,GAAM,eADR,eAGA,sCAAqB,0BAAYA,WAAW,KAAvB,eAArB,0GACA,8EAA6D,qBAAGA,WAAW,KAAQ,CAC/E,KAAQ,mBADiD,iBAA7D,KAGA,iBAAQ,CACN,GAAM,iBADR,iBAGA,uCAAsB,0BAAYA,WAAW,KAAvB,iBAAtB,kIACA,iFAAgE,qBAAGA,WAAW,KAAQ,CAClF,KAAQ,mDADoD,mBAAhE,KAGA,iBAAQ,CACN,GAAM,iBADR,iBAGA,uCAAsB,0BAAYA,WAAW,KAAvB,iBAAtB,yDACA,iFAAgE,qBAAGA,WAAW,KAAQ,CAClF,KAAQ,mDADoD,mBAAhE,KAGA,iBAAQ,CACN,GAAM,kBADR,kBAGA,sCAAqB,0BAAYA,WAAW,KAAvB,kBAArB,wGAAwL,0BAAYA,WAAW,KAAvB,cAAxL,MAKJJ,EAAWK,gBAAiB,E,aCjFb,4BAAM,2BACjB,uBACIC,SADJ,EAEIC,YAFJ,EAGIC,YAHJ,EAIIC,IAJJ,IAKIC,QAAS,CAAC,iBAAD,gFAST,oBAfO","file":"component---src-pages-concepts-parcel-types-js-5f5cce632555498cf8ef.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"parcel-types\"\n    }}>{`Parcel types`}</h1>\n    <p>{`Each parcel has one or more parcel types that are determined by the kind of data it contains.\nAny parcel can be more than one type at once.`}</p>\n    <p>{`You can check a parcel's type by using their `}<a parentName=\"p\" {...{\n        \"href\": \"/api/Parcel#Type-methods\"\n      }}>{`type methods`}</a>{`.`}</p>\n    <p>{`Parcel's can contain any type of value you like, but only a subset of these values will give you the ability to edit child values. A parcel with the ability to edit child values will be of type `}<a parentName=\"p\" {...{\n        \"href\": \"#ParentParcel\"\n      }}>{`ParentParcel`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"parentparcel\"\n    }}>{`ParentParcel`}</h3>\n    <p>{`A parcel is a `}<inlineCode parentName=\"p\">{`ParentParcel`}</inlineCode>{` if its value contains editable child values. Child values are considered editable if they are compatible with the `}<a parentName=\"p\" {...{\n        \"href\": \"https://92green.github.io/unmutable/\",\n        \"target\": \"_blank\",\n        \"rel\": [\"nofollow\", \"noopener\", \"noreferrer\"]\n      }}>{`unmutable`}<span parentName=\"a\">{``}</span></a>{` data collection library. These value types are currently supported:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Objects`}</li>\n      <li parentName=\"ul\">{`Arrays`}</li>\n      <li parentName=\"ul\">{`Immutable.js Maps`}</li>\n      <li parentName=\"ul\">{`Immutable.js Lists`}</li>\n      <li parentName=\"ul\">{`Immutable.js Records`}</li>\n    </ul>\n    <p>{`Unmutable guarantees that data is edited immutably, which is very important for dataparcels.`}</p>\n    <p>{`Class instances are not recognised as `}<inlineCode parentName=\"p\">{`ParentParcel`}</inlineCode>{`s because there are no guarantees that they are immutable and Unmutable doesn't know how to interact with them.`}</p>\n    <p>{`If you want the ability to edit the child values on a data type not listed, please make a request in the `}<a parentName=\"p\" {...{\n        \"href\": \"http://github.com/92green/unmutable/issues\",\n        \"target\": \"_blank\",\n        \"rel\": [\"nofollow\", \"noopener\", \"noreferrer\"]\n      }}>{`unmutable issue tracker`}<span parentName=\"a\">{``}</span></a>{`.`}</p>\n    <p>{`When a parcel is a parent parcel, it allows the use of `}<a parentName=\"p\" {...{\n        \"href\": \"/api/Parcel#Branch-methods\"\n      }}>{`branch methods`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"#Parent-methods\"\n      }}>{`parent methods`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"childparcel\"\n    }}>{`ChildParcel`}</h3>\n    <p>{`A parcel is a `}<inlineCode parentName=\"p\">{`ChildParcel`}</inlineCode>{` if it contains a child value from a parent parcel. Child parcels are created using branching methods.`}</p>\n    <p>{`When a parcel is a child parcel, it allows the use of `}<a parentName=\"p\" {...{\n        \"href\": \"#Child-methods\"\n      }}>{`child methods`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"indexedparcel\"\n    }}>{`IndexedParcel`}</h3>\n    <p>{`A parcel is an `}<inlineCode parentName=\"p\">{`IndexedParcel`}</inlineCode>{` if it contains an indexed data type, such as an array or an Immutable.js List. IndexedParcels are also always parent parcels.`}</p>\n    <p>{`When a parcel is an indexed parcel, it allows the use of `}<a parentName=\"p\" {...{\n        \"href\": \"/api/Parcel#indexed-and-element-change-methods\"\n      }}>{`indexed methods`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"elementparcel\"\n    }}>{`ElementParcel`}</h3>\n    <p>{`A parcel is an `}<inlineCode parentName=\"p\">{`ElementParcel`}</inlineCode>{` if it contains the child value of an indexed parcel.`}</p>\n    <p>{`When a parcel is an element parcel, it allows the use of `}<a parentName=\"p\" {...{\n        \"href\": \"/api/Parcel#indexed-and-element-change-methods\"\n      }}>{`element methods`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"toplevelparcel\"\n    }}>{`TopLevelParcel`}</h3>\n    <p>{`A parcel is a `}<inlineCode parentName=\"p\">{`TopLevelParcel`}</inlineCode>{` if it is not a child parcel. Examples: the parcel provided by a ParcelHoc, or a parcel created with `}<inlineCode parentName=\"p\">{`new Parcel`}</inlineCode>{`.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","// @flow\nimport React from 'react';\nimport Page from 'component/Page';\nimport {ContentNav} from 'dcme-style';\nimport ParcelTypesMarkdown from 'mdx/concepts/parcel-types.mdx';\nimport {conceptsNav} from 'nav/apiNav';\n\nexport default () => <Page>\n    <ContentNav\n        pageTop\n        pageBottom\n        mdxHeading\n        nav={conceptsNav}\n        pageNav={[\n            '# Parcel Types',\n            'ParentParcel',\n            'ChildParcel',\n            'IndexedParcel',\n            'ElementParcel',\n            'TopLevelParcel'\n        ]}\n    >\n        <ParcelTypesMarkdown />\n    </ContentNav>\n</Page>;\n"],"sourceRoot":""}